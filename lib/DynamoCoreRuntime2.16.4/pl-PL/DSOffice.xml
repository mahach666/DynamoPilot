<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>Sprawdź, czy proces programu Excel jest uruchomiony</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>Sprawdź, czy ten obiekt zawiera odniesienie do programu Excel</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>Zamknij wszystkie skoroszyty programu Excel i, jeśli to konieczne, otwórz okno dialogowe ZapiszJako.  Wykonaj również kolekcję błędnych danych i usuń odniesienia do programu Excel</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>Odczytuje dany plik Excel i zwraca skoroszyt</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>Zwraca listę wszystkich arkuszy z danego skoroszytu programu Excel</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>Zwraca arkusz z danego skoroszytu według jego nazwy</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>Odczytuje i pobiera dane z danego arkusza programu Excel</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>Zapisuje podane dane według określonego numeru wiersza i kolumny (baza 0) w danym arkuszu i zwraca arkusz</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Dodaje nowy arkusz programu Excel z określoną nazwą do danego skoroszytu</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>Tworzy nowy tymczasowy skoroszyt programu Excel</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Zapisuje podany skoroszyt programu Excel do określonej ścieżki pliku i zwraca ją</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Odczyt danych z arkusza kalkulacyjnego programu Microsoft Excel. Dane
                są odczytywane według wierszy i zwracane w różnych listach
                według wierszy. Wiersze i kolumny mają indeksy zerowe;
                na przykład wartość w komórce A1 pojawi się na liście danych w [0,0].
                Ten węzeł wymaga instalacji programu Microsoft Excel.</summary>
            <param name="file">Plik reprezentujący arkusz kalkulacyjny programu Microsoft Excel.</param>
            <param name="sheetName">Nazwa arkusza zawierającego dane.</param>
            <param name="readAsStrings">przełączaj między odczytywaniem lub nieodczytywaniem pliku programu Excel jako tylko ciągi</param>
            <param name="showExcel">przełączaj między wyświetlaniem lub ukrywaniem głównego okna programu Excel</param>
            <returns name="data">Wiersze z danymi z arkusza kalkulacyjnego Excel.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Zapisz dane w arkuszu kalkulacyjnym programu Microsoft Excel. Dane są zapisywane według wierszy
                z podlistami zapisywanymi w kolejnych wierszach. Wiersze i kolumny mają 
                indeksy zerowe; na przykład wartość na liście danych w [0,0] zostanie
                zapisana w komórce A1. Wartości zerowe i puste listy są zapisywane w programie Excel
                jako puste komórki. Ten węzeł wymaga instalacji programu Microsoft                 Excel.</summary>
            <param name="filePath">Ścieżka do pliku arkusza kalkulacyjnego programu Microsoft Excel.</param>
            <param name="sheetName">Nazwa arkusza, w którym zostaną zapisane dane.</param>
            <param name="startRow">Wiersz początkowy do zapisu danych. Wprowadź wartość 0 dla A, 1 dla B itd.</param>
            <param name="startCol">Kolumna początkowa do zapisu danych. Wprowadź wartość 0 dla kolumny 1, 1 dla kolumny 2 itd.</param>
            <param name="data">Dane do zapisania w arkuszu kalkulacyjnym.</param>
            <param name="overWrite"/>
            <returns name="data">Dane zapisane w arkuszu kalkulacyjnym.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>Zwraca dane z podanego arkusza (węzeł GetDataFromExcelWorksheet)</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>utwórz nowy arkusz z podanego skoroszytu i nazwy (węzeł AddExcelWorksheetToWorkbook)</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>metoda wystąpienia zapisująca dane w istniejącym arkuszu, (WriteDataToExcelWorksheet node)</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(węzeł GetWorksheetsFromExcelWorkbook)</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>Tworzy nowy skoroszyt z danymi wejściowymi w formie ścieżki pliku i nazwy arkusza</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>Metoda pomocnika umożliwiająca odczyt skoroszytów z wyłączoną widocznością.</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(węzeł SaveAsExcelWorkbook)</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(węzeł ReadExcelFile)</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>metoda wystąpienia, (węzeł GetExcelWorksheetByName)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>Metody kategorii Import/Eksport.</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>Zapisz wykaz list w pliku w formacie wartości oddzielonych przecinkami.
                 Lista zewnętrzna reprezentuje wiersze, a listy wewnętrzne reprezentują kolumny.</summary>
            <param name="filePath">Ścieżka do zapisania</param>
            <param name="data">Wykaz list, który zostanie zapisany do pliku CSV</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>Importuje dane z pliku CSV (wartości oddzielone przecinkami), umieszcza elementy na liście i
                dokonuje przestawienia w razie potrzeby.</summary>
            <param name="filePath">Plik CSV do przekonwertowania na listę</param>
            <param name="transpose">Przełącz, aby przestawić zaimportowane dane</param>
            <returns name="list">Lista zawierająca elementy w pliku CSV</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Odczyt danych z arkusza kalkulacyjnego programu Microsoft Excel. Dane
                są odczytywane według wierszy i zwracane w różnych listach
                według wierszy. Wiersze i kolumny mają indeksy zerowe;
                na przykład wartość w komórce A1 pojawi się na liście danych w pozycji [0,0].
                Ten węzeł wymaga zainstalowania programu Microsoft Excel.</summary>
            <param name="file">Plik reprezentujący skoroszyt programu Excel</param>
            <param name="sheetName">Nazwa arkusza zawierającego dane</param>
            <param name="readAsStrings">Przełącz, aby odczytywać komórki jako ciągi</param>
            <param name="showExcel">Przełącz, aby wyświetlić okno główne programu Excel</param>
            <returns name="data">Wiersze danych z arkusza programu Excel</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Zapis danych do arkusza kalkulacyjnego programu Microsoft Excel. Dane
                są zapisywane według wierszy z podlistami zapisywanymi w kolejnych
                wierszach. Wiersze i kolumny mają indeksy zerowe; na przykład wartość
                na liście danych w pozycji [0,0] zostanie zapisana w komórce A1. Wartości
                zerowe i puste listy są zapisywane w programie Excel jako puste komórki. 
                Ten węzeł wymaga zainstalowania programu Microsoft Excel.</summary>
            <param name="filePath">Ścieżka pliku arkusza kalkulacyjnego programu Microsoft Excel</param>
            <param name="sheetName">Nazwa arkusza, w którym zostaną zapisane dane</param>
            <param name="startRow">Wiersz początkowy do zapisu danych. Wartość 0 wskazuje wiersz 1, wartość 1 — wiersz 2 itd.</param>
            <param name="startColumn">Kolumna początkowa do zapisu danych. Wprowadź wartość 0 dla kolumny A, 1 dla kolumny B itd.</param>
            <param name="data">Dane do zapisania w arkuszu kalkulacyjnym</param>
            <param name="overWrite">Prawda, aby nadpisać plik, fałsz, aby go nie nadpisywać</param>
            <returns name="data">Dane zapisane w arkuszu kalkulacyjnym</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>Zapisz dane w arkuszu kalkulacyjnym programu Microsoft Excel. Dane są zapisywane według wierszy
                z podlistami zapisywanymi w kolejnych wierszach. Wiersze i kolumny są indeksowane
                od zera — na przykład wartość [0,0] na liście danych zostanie zapisana
                w komórce A1. Wartości zerowe i puste listy są zapisywane w programie Excel
                jako puste komórki. Ten węzeł wymaga zainstalowania programu Microsoft Excel.</summary>
            <param name="filePath">Plik reprezentujący skoroszyt programu Excel</param>
            <param name="sheetName">Nazwa arkusza zawierającego dane</param>
            <param name="startRow">Wiersz początkowy do zapisu danych. Wprowadź wartość 0 dla wiersza 1, 1 dla wiersza 2 itd.</param>
            <param name="startColumn">Kolumna początkowa do zapisu danych. Wprowadź wartość 0 dla kolumny A, 1 dla kolumny B itd.</param>
            <param name="data">Dane do zapisania w arkuszu kalkulacyjnym</param>
            <param name="overWrite">Przełącz, aby wyczyścić arkusz przed zapisem</param>
            <param name="writeAsString">Przełącz opcję zapisywania plików programu Excel w postaci ciągów</param>
            <returns name="data">Wiersze danych z arkusza programu Excel</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Odczyt danych z arkusza kalkulacyjnego programu Microsoft Excel za pomocą standardu Open XML.
            Dane są odczytywane wierszami i zwracane jako seria list według wierszy.
            Wiersze i kolumny są indeksowane od zera. Na przykład wartość w komórce A1
            pojawi się na liście danych z indeksem [0,0].</summary>
            <param name="filePath">Plik reprezentujący skoroszyt programu Excel</param>
            <param name="sheetName">Nazwa arkusza zawierającego dane</param>
            <param name="startRow">Wiersz początkowy dla odczytu danych. Wprowadź 0 dla wiersza 1, 1 dla wiersza 2 itd.</param>
            <param name="startColumn">Kolumna początkowa dla odczytu danych. Wpisz 0 dla kolumny A, 1 dla kolumny B itd.</param>
            <param name="readAsString">Przełącz, aby odczytywać komórki jako ciągi</param>
            <returns name="data">Wiersze danych z arkusza programu Excel</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Zapis danych w arkuszu kalkulacyjnym programu Microsoft Excel za pomocą standardu Open XML.
            Dane są zapisywane wierszami z podlistami zapisywanymi w kolejnych wierszach.
            Wiersze i kolumny są indeksowane od zera. Na przykład wartość na liście danych
            z indeksem [0,0] zostanie zapisana w komórce A1. Wartości null i puste listy zostaną zapisane jako puste komórki.</summary>
            <param name="filePath">Plik reprezentujący skoroszyt programu Excel</param>
            <param name="sheetName">Nazwa arkusza zawierającego dane</param>
            <param name="startRow">Wiersz początkowy dla zapisu danych. Wprowadź wartość 0 dla 1, 1 dla 2 itd.</param>
            <param name="startColumn">Kolumna początkowa dla zapisu danych. Wprowadź wartość 0 dla kolumny A, 1 dla kolumny B itd.</param>
            <param name="data">Dane do zapisania w arkuszu kalkulacyjnym</param>
            <param name="overWrite">Przełącz, aby wyczyścić arkusz przed zapisem</param>
            <param name="writeAsString">Przełącz opcję zapisywania wartości komórek w postaci ciągów</param>
            <search>office,excel,spreadsheet</search>
            <returns>Operacja logiczna wskazująca, czy zapis w arkuszu kalkulacyjnym się powiódł.</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>Obsługuje odczytywanie i zapisywanie plików programu Excel za pomocą zestawu SDK Open XML.</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Odczytuje dane z arkusza kalkulacyjnego programu Excel za pomocą zestawu SDK Open XML.</summary>
            <param name="filePath">Ścieżka do pliku skoroszytu programu Excel</param>
            <param name="sheetName">Nazwa arkusza do odczytu z wewnątrz skoroszytu</param>
            <param name="startRow">Wiersz, od którego należy rozpocząć odczyt danych (numerowanie od zera)</param>
            <param name="startColumn">Kolumna, od której należy rozpocząć odczyt danych (numerowanie od zera)</param>
            <param name="readAsString">Czy wartości komórek mają być odczytywane jako ciągi, czy nie</param>
            <returns>Wartości komórek odczytywane z arkusza kalkulacyjnego</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Zapisuje dane w arkuszu kalkulacyjnym programu Excel za pomocą zestawu SDK Open XML.</summary>
            <param name="filePath">Ścieżka do pliku skoroszytu programu Excel. Jeśli nie istnieje, zostanie utworzony nowy skoroszyt.</param>
            <param name="sheetName">Nazwa arkusza do zapisywania w skoroszycie</param>
            <param name="data">Wartości danych, które należy zapisać w komórkach arkusza</param>
            <param name="startRow">Wiersz, od którego należy rozpocząć zapis danych (numerowanie od zera)</param>
            <param name="startColumn">Kolumna, od której należy rozpocząć zapis danych (numerowanie od zera)</param>
            <param name="overWrite">Czy arkusz powinien zostać ponownie utworzony przed zapisem</param>
            <param name="writeAsString">Czy wartości danych mają być zapisywane jako ciągi, czy nie</param>
            <returns>Operacja logiczna wskazująca, czy zapis w arkuszu kalkulacyjnym się powiódł.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>Na podstawie danych arkusza zwraca najwyższy indeks kolumny dla wszystkich wierszy.</summary>
            <param name="sheetData">Dane arkusza</param>
            <returns>Znaleziony najwyższy indeks kolumny</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>Na podstawie indeksów kolumn i wierszy, takich jak 3 i 7, zwraca odniesienie do komórki, w tym przypadku C7.</summary>
            <param name="columnIndex">Indeks kolumny (numerowanie od 1)</param>
            <param name="rowIndex">Indeks wiersza (numerowanie od 1)</param>
            <returns>Odniesienie do komórki, które odpowiada podanym kolumnie i indeksowi</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>Na podstawie odniesienia do komórki, np. C7, zwraca indeks kolumny, w tym przypadku C = 3.</summary>
            <param name="cellReference">Odniesienie do komórki, takie jak C7</param>
            <returns>Indeks kolumny (numerowanie od 1) odpowiada sekwencji liter identyfikującej kolumnę komórki</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Pobiera wartość z komórki, opcjonalnie przekształcając ją w ciąg.</summary>
            <param name="cell">Komórka, z której ma zostać pobrana wartość</param>
            <param name="sharedStringTable">Struktura arkusza kalkulacyjnego zawierającego rzeczywiste wartości ciągów</param>
            <param name="stylesheet">Sekcja stylu arkusza kalkulacyjnego zawierająca informacje o formatowaniu</param>
            <param name="readAsString">W przypadku wartości true (prawda) zostanie zwrócony ciąg, a nie rzeczywista wartość komórki</param>
            <returns>Wartość wewnątrz komórki, być może przekształcona w ciąg znaków</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Pobiera z dokumentu arkusz o określonej nazwie.</summary>
            <param name="document">Dokument, z którego należy pobrać arkusz</param>
            <param name="sheetName">Nazwa arkusza do pobrania</param>
            <returns>Arkusz o podanej nazwie lub wartość null, jeśli go nie znaleziono</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>Sprawdza, czy przekazywane dane zawierają funkcję.</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>Otwiera istniejący skoroszyt lub tworzy całkiem nowy w określonej ścieżce pliku.</summary>
            <param name="filePath">Ścieżka pliku, w której należy utworzyć skoroszyt</param>
            <param name="sheetName">W przypadku utworzenia nowego skoroszytu arkusz będzie mieć tę nazwę</param>
            <returns>Dokument arkusza kalkulacyjnego</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>Dodaje style domyślne do arkusza stylów, dzięki czemu pakiet Office nie rozpoznaje tego arkusza kalkulacyjnego jako uszkodzonego.</summary>
            <param name="stylesheet">Sekcja arkusza stylów nowego dokumentu</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>Usuwa arkusz z dokumentu.</summary>
            <param name="document">Dokument, z którego należy usunąć arkusz</param>
            <param name="worksheetPart">Arkusz do usunięcia</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Dodaje arkusz do dokumentu.</summary>
            <param name="document">Dokument, do którego należy dodać arkusz</param>
            <param name="sheetName">Nazwa arkusza, który ma zostać dodany</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Ustawia wartość komórki, opcjonalnie przekształcając ją najpierw w ciąg.</summary>
            <param name="value">Wartość do ustawienia w komórce</param>
            <param name="cell">Komórka, w której ma zostać ustawiona wartość</param>
            <param name="sharedStringTable">Struktura arkusza kalkulacyjnego zawierającego rzeczywiste wartości ciągów</param>
            <param name="stylesheet">Sekcja stylu arkusza kalkulacyjnego zawierająca informacje o formatowaniu</param>
            <param name="writeAsString">W przypadku ustawienia true (prawda) wartość zostanie przekształcona w ciąg przed zapisaniem w komórce</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>Silnie typizowana klasa zasobów do wyszukiwania zlokalizowanych ciągów itp.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>Zwraca buforowane wystąpienie Menedżera Zasobów używane przez tę klasę.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>Nadpisuje właściwość CurrentUICulture bieżącego gwintu dla wszystkich wyszukiwań zasobów przy użyciu tej silnie typizowanej klasy zasobów.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>Wyszukuje zlokalizowany ciąg podobny do Błąd konfigurowania komunikacji z programem Excel.  Spróbuj zamknąć wszystkie otwarte wystąpienia programu Excel.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>Wyszukuje zlokalizowany ciąg podobny do Program Excel nie jest zainstalowany. href=ExcelNotInstalled.html.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>Wyszukuje zlokalizowany ciąg podobny do Brak zgodności jednego typu danych wejściowych lub większej ich liczby. Nie można znaleźć wersji {0}, która wymaga argumentów typu {1}.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>Wyszukuje zlokalizowany ciąg podobny do Zamiast tego użyj węzła File.FromPath - &gt; Excel.ReadFromFile.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>Wyszukuje zlokalizowany ciąg podobny do: W podanej ścieżce nie odnaleziono skoroszytu.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>Wyszukuje zlokalizowany ciąg podobny do: W skoroszycie nie odnaleziono arkusza o podanej nazwie „{0}”.</summary>
        </member>
    </members>
</doc>