<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>Excel 프로세스가 실행되고 있는지 확인합니다</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>이 객체에 Excel에 대한 참조가 포함되어 있는지 확인합니다</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>모든 Excel 통합 문서를 닫고 필요한 경우 다른 이름으로 저장 대화상자를 제공합니다. 또한
            가비지 수집을 수행하고 Excel 앱에 대한 참조를 제거합니다</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>지정된 Excel 파일을 읽고 통합 문서를 반환합니다</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>지정된 Excel 통합 문서에 존재하는 모든 워크시트 리스트를 반환합니다</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>지정된 통합 문서에서 이름을 기준으로 워크시트를 반환합니다.</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>지정된 Excel 워크시트에서 데이터를 읽고 검색합니다</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>지정된 워크시트의 지정된 행 및 열 번호(기본 0)에 지정된 데이터를 쓰고
            워크시트를 반환합니다</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>새 Excel 워크시트를 지정된 이름으로 지정된 통합 문서에 추가합니다</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>새로운 임시 Excel 통합 문서를 작성합니다</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>지정된 Excel 통합 문서를 지정된 파일 경로에 저장한 다음 반환합니다</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Microsoft Excel 스프레드시트에서 데이터를 읽습니다. 데이터는 행별로
                읽고 일련의 행별 리스트로 반환합니다. 행과 열은 0부터 인덱스가 지정됩니다.
                예를 들어 A1 셀의 값은 데이터 리스트의 [0,0]에 표시됩니다.
                이 노드에는 Microsoft Excel을 설치해야 합니다.</summary>
            <param name="file">Microsoft Excel 스프레드시트를 나타내는 파일.</param>
            <param name="sheetName">데이터가 포함된 워크시트의 이름.</param>
            <param name="readAsStrings">Excel 파일을 문자열로만 읽거나 문자열로만 읽지 않음</param>
            <param name="showExcel">토글하여 주 Excel 창을 표시하거나 숨기도록 전환</param>
            <returns name="data">Excel 워크시트의 데이터 행.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Microsoft Excel 스프레드시트에 데이터를 씁니다. 데이터는 하위 리스트가
                있는 행으로 쓰이고 연속 행으로 쓰입니다. 행 및 열은 0 인덱스입니다. 
                예를 들어, 데이터 리스트의 [0,0]에 있는 값은 셀 A1에 
                쓰입니다. Null 값과 빈 리스트는 Excel에 빈 셀로 쓰입니다.
                이 노드를 사용하려면 Microsoft Excel이 설치되어 있어야 합니다.</summary>
            <param name="filePath">Microsoft Excel 스프레드시트의 파일 경로.</param>
            <param name="sheetName">데이터를 쓸 워크시트의 이름.</param>
            <param name="startRow">데이터를 쓸 시작 행입니다. 행1에 0을, 행2에 2를 입력하는 식으로 입력합니다.</param>
            <param name="startCol">데이터를 쓸 시작 열입니다. 열A에 0을, 열B에 1을 입력하는 식으로 입력합니다.</param>
            <param name="data">스프레드시트에 쓸 데이터.</param>
            <param name="overWrite"/>
            <returns name="data">스프레드시트에 쓴 데이터.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>지정된 워크시트(GetDataFromExcelWorksheet 노드)에서 데이터를 반환합니다.</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>지정된 통합 문서 및 이름에서 새 워크시트를 작성합니다(AddExcelWorksheetToWorkbook 노드)</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>인스턴스 방법, 기존 워크시트에 데이터 쓰기, (WriteDataToExcelWorksheet 노드)</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(GetWorksheetsFromExcelWorkbook 노드)</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>파일 경로 및 시트 이름을 입력으로 사용하여 새 Workbook을 작성합니다</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>보이지 않게 설정한 통합 문서를 읽는 도우미 메서드.</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(SaveAsExcelWorkbook 노드)</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(ReadExcelFile 노드)</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>인스턴스(instance) 방법, (GetExcelWorksheetByName 노드)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>카테고리 가져오기/내보내기에 대한 방법입니다.</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>쉼표로 구분된 값 형식을 사용하여 리스트의 리스트를 파일에
                씁니다. 외부 리스트는 행을, 내부 리스트는 열을 나타냅니다.</summary>
            <param name="filePath">쓸 경로</param>
            <param name="data">CSV에 쓸 리스트의 리스트</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>CSV(쉼표로 구분된 값) 파일에서 데이터를 가져와 항목을 리스트에 넣은 다음
                필요한 경우 행과 열을 바꾸십시오.</summary>
            <param name="filePath">리스트로 변환할 CSV 파일</param>
            <param name="transpose">토글하여 가져온 데이터의 행과 열 바꾸기</param>
            <returns name="list">CSV 파일의 항목이 포함된 리스트</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Microsoft Excel 스프레드시트에서 데이터를 읽습니다. 데이터는 행별로
                읽고 일련의 행별 리스트로 반환합니다. 행과 열은 0 인덱스입니다.
                예를 들어 A1 셀의 값은 데이터 리스트의 [0,0]에 표시됩니다.
                이 노드에는 Microsoft Excel을 설치해야 합니다.</summary>
            <param name="file">Excel 통합 문서를 나타내는 파일</param>
            <param name="sheetName">데이터가 포함된 워크시트의 이름</param>
            <param name="readAsStrings">토글하여 셀을 문자열로 읽기</param>
            <param name="showExcel">토글하여 Excel 주 창 표시</param>
            <returns name="data">Excel 워크시트의 데이터 행</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Microsoft Excel 스프레드시트에 데이터를 씁니다. 데이터는 하위 리스트가
                있는 행으로 쓰이고 연속 행으로 쓰입니다. 행 및 열은 0 인덱스입니다. 
                예를 들어, 데이터 리스트의 [0,0]에 있는 값은 셀 A1에 
                쓰입니다. Null 값과 빈 리스트는 Excel에 빈 셀로 쓰입니다.
                이 노드를 사용하려면 Microsoft Excel이 설치되어 있어야 합니다.</summary>
            <param name="filePath">Microsoft Excel 스프레드시트의 파일 경로</param>
            <param name="sheetName">데이터를 쓸 워크시트의 이름</param>
            <param name="startRow">데이터를 쓸 시작 행입니다. 행1에 0을, 행2에 1를 입력하는 식으로 입력합니다.</param>
            <param name="startColumn">데이터를 쓸 시작 열입니다. 열A에 0을, 열B에 1을 입력하는 식으로 입력합니다.</param>
            <param name="data">스프레드시트에 쓸 데이터</param>
            <param name="overWrite">파일을 덮어쓰려면 true, 덮어쓰지 않으려면 false</param>
            <returns name="data">스프레드시트에 쓴 데이터</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>Microsoft Excel 스프레드시트에 데이터를 씁니다. 데이터는 하위 리스트가
                있는 행으로 쓰이고 연속 행으로 쓰입니다. 행 및 열은 0 인덱스입니다. 
                예를 들어, 데이터 리스트의 [0,0]에 있는 값은 셀 A1에 
                쓰입니다. Null 값과 빈 리스트는 Excel에 빈 셀로 쓰입니다.
                이 노드를 사용하려면 Microsoft Excel이 설치되어 있어야 합니다.</summary>
            <param name="filePath">Excel 통합 문서를 나타내는 파일</param>
            <param name="sheetName">데이터가 포함된 워크시트의 이름</param>
            <param name="startRow">데이터를 쓸 시작 행입니다. 행 1에 0을, 행 2에 1을 입력하는 식으로 입력합니다.</param>
            <param name="startColumn">데이터를 쓸 시작 열입니다. 열A에 0을, 열B에 1을 입력하는 식으로 입력합니다.</param>
            <param name="data">스프레드시트에 쓸 데이터</param>
            <param name="overWrite">토글하여 쓰기 전에 스프레드시트 지우기</param>
            <param name="writeAsString">토글하여 Excel 파일을 문자열로 쓸지 전환</param>
            <returns name="data">Excel 워크시트의 데이터 행</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Open XML 표준을 사용하여 Microsoft Excel 스프레드시트에서 데이터를 읽습니다.
            데이터는 행별로 읽히며 일련의 행별 리스트로 반환됩니다.
            행과 열은 0부터 시작합니다. 예를 들어 A1 셀의 값은
            데이터 리스트의 [0,0]에 나타납니다.</summary>
            <param name="filePath">Excel 통합 문서를 나타내는 파일</param>
            <param name="sheetName">데이터가 포함된 워크시트의 이름</param>
            <param name="startRow">데이터 읽기의 시작 행입니다. 행 1에 0을, 행 2에 1을 입력하는 식으로 입력합니다.</param>
            <param name="startColumn">데이터 읽기의 시작 열입니다. 열 A에 0을, 열 B에 1을 입력하는 식으로 입력합니다.</param>
            <param name="readAsString">토글하여 셀을 문자열로 읽기</param>
            <returns name="data">Excel 워크시트의 데이터 행</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Open XML 표준을 사용하여 데이터를 Microsoft Excel 스프레드시트로 씁니다.
            데이터는 연속적인 행으로 쓰이도록 하위 리스트가 있는 행으로 쓰입니다.
            행과 열은 0부터 시작합니다. 예를 들어, 데이터 리스트에서 [0,0]에 있는 값은
            A1 셀에 쓰입니다. Null 값 및 빈 리스트는 빈 셀로 쓰입니다.</summary>
            <param name="filePath">Excel 통합 문서를 나타내는 파일</param>
            <param name="sheetName">데이터가 포함된 워크시트의 이름</param>
            <param name="startRow">데이터 쓰기의 시작 행입니다. 행 1에 0을, 행 2에 1을 입력하는 식으로 입력합니다.</param>
            <param name="startColumn">데이터 쓰기의 시작 열입니다. 열 A에 0을, 열 B에 1을 입력하는 식으로 입력합니다.</param>
            <param name="data">스프레드시트에 쓸 데이터</param>
            <param name="overWrite">토글하여 쓰기 전에 스프레드시트 지우기</param>
            <param name="writeAsString">토글하여 셀 값을 문자열로 쓸지 여부 간에 전환</param>
            <search>office,excel,spreadsheet</search>
            <returns>스프레드시트에 성공적으로 쓰였는지를 나타내는 부울입니다.</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>Open XML SDK를 사용하여 Excel 파일의 읽기 및 쓰기를 처리합니다.</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Open XML SDK를 사용하여 Excel 스프레드시트에서 데이터를 읽습니다.</summary>
            <param name="filePath">Excel 통합 문서 파일의 경로</param>
            <param name="sheetName">통합 문서 내부에서 읽을 시트의 이름</param>
            <param name="startRow">읽기를 시작할 행(0부터 시작)</param>
            <param name="startColumn">읽기를 시작할 열(0부터 시작)</param>
            <param name="readAsString">셀 값을 문자열로 읽을지 여부</param>
            <returns>스프레드시트에서 읽은 셀 값</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Open XML SDK를 사용하여 Excel 스프레드시트에 데이터를 씁니다.</summary>
            <param name="filePath">Excel 통합 문서 파일의 경로입니다. 해당 경로가 없는 경우 새 통합 문서가 작성됩니다.</param>
            <param name="sheetName">통합 문서 내에 쓸 시트의 이름</param>
            <param name="data">시트의 셀에 쓸 데이터 값</param>
            <param name="startRow">쓰기를 시작할 행(0부터 시작)</param>
            <param name="startColumn">쓰기를 시작할 열(0부터 시작)</param>
            <param name="overWrite">쓰기 전에 시트를 다시 작성해야 하는지 여부</param>
            <param name="writeAsString">데이터 값이 문자열로 쓰여져야 하는지 여부</param>
            <returns>스프레드시트에 성공적으로 쓰였는지를 나타내는 부울입니다.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>워크시트의 데이터가 주어진 경우 행에 대해 가장 큰 열 색인이 반환됩니다.</summary>
            <param name="sheetData">워크시트의 데이터</param>
            <returns>발견된 가장 큰 열 색인</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>3과 7과 같이 열 및 행 색인이 주어진 경우 셀 참조(이 경우 C7)가 반환됩니다.</summary>
            <param name="columnIndex">열 색인(1부터 시작)</param>
            <param name="rowIndex">행 색인(1부터 시작)</param>
            <returns>제공된 열 및 색인과 일치하는 셀 참조</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>C7과 같은 셀 참조가 주어진 경우 열 색인(이 경우 C = 3)이 반환됩니다.</summary>
            <param name="cellReference">C7과 같은 셀 참조</param>
            <returns>셀 열을 식별하는 문자 시퀀스에 해당하는 열 색인(1부터 시작)</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>셀에서 값을 가져와 선택적으로 문자열로 변환합니다.</summary>
            <param name="cell">값을 가져올 셀</param>
            <param name="sharedStringTable">실제 문자열 값을 포함하는 스프레드시트의 구조</param>
            <param name="stylesheet">형식 정보를 포함하는 스프레드시트의 스타일 섹션</param>
            <param name="readAsString">true인 경우 실제 셀 값이 아닌 문자열이 반환됩니다.</param>
            <returns>셀 내부의 값(문자열로 변환될 수 있음)</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>문서에서 지정된 이름의 워크시트를 가져옵니다.</summary>
            <param name="document">워크시트를 가져올 문서</param>
            <param name="sheetName">가져올 시트의 이름</param>
            <returns>지정된 이름의 시트 또는 null(해당 시트를 찾을 수 없는 경우)</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>데이터에 전달된 내용 중에 함수가 포함되어 있는지 확인합니다.</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>기존 통합 문서를 열거나 지정된 파일 경로에서 처음부터 통합 문서를 작성합니다.</summary>
            <param name="filePath">통합 문서가 있거나 통합 문서를 작성해야 하는 파일 경로</param>
            <param name="sheetName">새 통합 문서가 작성되는 경우 시트가 이 이름을 사용합니다.</param>
            <returns>스프레드시트 문서</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>Office가 스프레드시트를 손상된 것으로 식별하지 않도록 스타일시트에 기본 스타일을 추가합니다.</summary>
            <param name="stylesheet">새 문서의 스타일시트 섹션</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>문서에서 워크시트를 제거합니다.</summary>
            <param name="document">워크시트를 제거할 문서</param>
            <param name="worksheetPart">제거할 워크시트</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>문서에 워크시트를 추가합니다.</summary>
            <param name="document">워크시트를 추가할 문서</param>
            <param name="sheetName">추가할 워크시트의 이름</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>셀의 값을 설정하여 선택적으로 먼저 문자열로 변환합니다.</summary>
            <param name="value">셀에 설정할 값</param>
            <param name="cell">값을 설정할 셀</param>
            <param name="sharedStringTable">실제 문자열 값을 포함하는 스프레드시트의 구조</param>
            <param name="stylesheet">형식 정보를 포함하는 스프레드시트의 스타일 섹션</param>
            <param name="writeAsString">true인 경우 셀에 쓰기 전에 값이 문자열로 변환됩니다.</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>현지화된 문자열 등을 조회하기 위한 강력한 유형의 리소스 클래스</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스(instance)를 반환합니다.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>이러한 강력한 유형의 리소스 클래스를 사용하여 모든 리소스 
              조회에 대한 현재 스레드의 CurrentUICulture 특성을 재지정합니다.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>'Excel과 통신을 설정하는 중에 오류가 발생했습니다. 열려 있는 Excel 인스턴스(instance)를 모두 닫아 보십시오.'와 유사한 현지화된 문자열을 조회합니다.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>'Excel이 설치되어 있지 않습니다.'와 유사한 현지화된 문자열을 조회합니다. href=ExcelNotInstalled.html.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>'하나 이상의 입력 유형이 일치하지 않습니다. {1} 유형의 인수를 사용하는 {0} 버전을 찾을 수 없습니다.'와 유사한 현지화된 문자열을 조회합니다.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>'대신 File.FromPath -&gt; Excel.ReadFromFile 노드를 사용하십시오.'와 유사한 현지화된 문자열을 조회합니다.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>'제공된 경로에서 통합 문서를 찾을 수 없습니다.'와 유사한 현지화된 문자열을 조회합니다.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>'통합 문서에서 제공된 이름 '{0}'의 워크시트를 찾을 수 없습니다.'와 유사한 현지화된 문자열을 조회합니다.</summary>
        </member>
    </members>
</doc>