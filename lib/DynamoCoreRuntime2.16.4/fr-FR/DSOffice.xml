<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>Vérifier si le processus Excel est en cours d'exécution</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>Vérifier si cet objet contient une référence à Excel</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>Fermer tous les classeurs Excel et fournir une boîte de dialogue Enregistrer sous si nécessaire. En outre, effectuer
            un nettoyage de la mémoire et supprimer les références à l'application Excel</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>Lit le fichier Excel spécifié et renvoie un classeur</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>Renvoie la liste de toutes les feuilles de calcul présentes dans le classeur Excel</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>Renvoie la feuille de calcul dans le classeur spécifié par son nom</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>Lit et récupère les données à partir de la feuille de calcul Excel spécifiée</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>Enregistre les données indiquées dans les numéros (base 0) de ligne et de colonne spécifiés dans la feuille de calcul spécifiée
            et renvoie la feuille de calcul</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Ajoute une nouvelle feuille de calcul Excel avec le nom spécifié dans le classeur spécifié</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>Crée un classeur Excel temporaire</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Enregistre le classeur Excel donné dans le chemin de fichier spécifié et le renvoie</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Lire les données à partir d'une feuille de calcul Microsoft Excel. Les données sont lues par ligne et
                renvoyées dans une série de listes par ligne. Les lignes et les colonnes sont indexées à partir de 0;
                par exemple, la valeur de la cellule A1 apparaît dans la liste de données à [0,0].
                Ce noeud nécessite que Microsoft Excel soit installé.</summary>
            <param name="file">Fichier représentant la feuille de calcul Microsoft Excel.</param>
            <param name="sheetName">Nom de la feuille de calcul contenant les données.</param>
            <param name="readAsStrings">activer/désactiver la lecture du fichier Excel sous forme de chaînes uniquement</param>
            <param name="showExcel">basculer entre l'affichage et le masquage de la fenêtre principale d'Excel</param>
            <returns name="data">Lignes de données de la feuille de calcul Excel.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Ecrire les données dans une feuille de calcul Microsoft Excel. Les données sont écrites par ligne
                avec des sous-listes écrites dans des lignes successives. Les lignes et les colonnes sont
                indexées à partir de zéro; par exemple, la valeur à [0,0] dans la liste de données 
                sera écrite dans la cellule A1. Les valeurs nulles et les listes vides sont écrites dans Excel
                sous forme de cellules vides. Ce noeud nécessite que Microsoft Excel soit installé.</summary>
            <param name="filePath">Chemin d'accès à la feuille de calcul Microsoft Excel.</param>
            <param name="sheetName">Nom de la feuille de calcul dans laquelle écrire les données.</param>
            <param name="startRow">Ligne à partir de laquelle écrire les données. Entrez 0 pour la ligne 1, 1 pour la ligne 2, etc.</param>
            <param name="startCol">Colonne à partir de laquelle écrire les données. Entrez 0 pour la colonne A, 1 pour la colonne B, etc.</param>
            <param name="data">Données à écrire dans la feuille de calcul.</param>
            <param name="overWrite"/>
            <returns name="data">Données écrites dans la feuille de calcul.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>Renvoie les données à partir de la feuille de calcul donnée (noeud GetDataFromExcelWorksheet)</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>créer une feuille de calcul à partir du classeur et du nom spécifiés (noeud AddExcelWorksheetToWorkbook)</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>méthode d'instance, écrire les données dans une feuille de calcul existante, (noeud WriteDataToExcelWorksheet)</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(noeud GetWorksheetsFromExcelWorkbook)</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>Crée une feuille de calcul avec le chemin d'accès et le nom de feuille indiqués</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>Méthode d'assistant de lecture de classeurs avec visibilité désactivée.</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(noeud SaveAsExcelWorkbook)</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(noeud ReadExcelFile)</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>méthode d'instance, (noeud GetExcelWorksheetByName)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>Méthodes pour importer/exporter une catégorie.</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>Ecrire une liste de listes dans un fichier en séparant les valeurs par des virgules
                La liste externe représente les lignes, la liste interne représente les colonnes.</summary>
            <param name="filePath">Ecrire dans ce chemin d'accès</param>
            <param name="data">Liste de listes à enregistrer dans le fichier CSV</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>Importe des données d'un fichier CSV (valeurs séparées par des virgules), place les éléments dans une liste et
                les transpose le cas échéant.</summary>
            <param name="filePath">Fichier CSV à convertir en liste</param>
            <param name="transpose">Indique si les données importées doivent être transposées</param>
            <returns name="list">Liste contenant les éléments du fichier CSV</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Lire les données à partir d'une feuille de calcul Microsoft Excel. Les données sont lues par ligne et
                renvoyées dans une série de listes par ligne. Les lignes et les colonnes sont indexées à partir de 0;
                par exemple, la valeur de la cellule A1 apparaît dans la liste de données à [0,0].
                Ce noeud nécessite que Microsoft Excel soit installé.</summary>
            <param name="file">Fichier représentant le classeur Excel</param>
            <param name="sheetName">Nom de la feuille de calcul contenant les données</param>
            <param name="readAsStrings">Indique si les cellules doivent être lues en tant que chaînes</param>
            <param name="showExcel">Indique si la fenêtre principale d'Excel doit être affichée</param>
            <returns name="data">Lignes de données extraites de la feuille de calcul Excel</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Ecrire les données dans une feuille de calcul Microsoft Excel. Les données sont écrites par ligne
                avec des sous-listes écrites dans des lignes successives. Les lignes et les colonnes sont
                indexées à partir de zéro; par exemple, la valeur à [0,0] dans la liste de données 
                sera écrite dans la cellule A1. Les valeurs nulles et les listes vides sont écrites dans Excel
                sous forme de cellules vides. Ce noeud nécessite que Microsoft Excel soit installé.</summary>
            <param name="filePath">Chemin d'accès au fichier de feuille de calcul Microsoft Excel</param>
            <param name="sheetName">Nom de la feuille de calcul dans laquelle écrire les données</param>
            <param name="startRow">Ligne à partir de laquelle écrire les données. Entrez 0 pour la ligne 1, 1 pour la ligne 2, etc.</param>
            <param name="startColumn">Colonne à partir de laquelle écrire les données. Saisissez 0 pour la colonne A, 1 pour la colonne B, etc.</param>
            <param name="data">Données à écrire dans la feuille de calcul</param>
            <param name="overWrite">True pour remplacer le fichier, False pour ne pas le remplacer</param>
            <returns name="data">Données écrites dans la feuille de calcul</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>Écrire les données dans une feuille de calcul Microsoft Excel. Les données sont écrites par ligne
                avec des sous-listes écrites dans des lignes successives. Les lignes et les colonnes sont
                indexées à partir de zéro; par exemple, la valeur à [0,0] dans la liste de données 
                sera écrite dans la cellule A1. Les valeurs nulles et les listes vides sont écrites dans Excel
                sous forme de cellules vides. Ce noeud nécessite que Microsoft Excel soit installé.</summary>
            <param name="filePath">Fichier représentant le classeur Excel</param>
            <param name="sheetName">Nom de la feuille de calcul contenant les données</param>
            <param name="startRow">Ligne à partir de laquelle écrire les données. Entrez 0 pour la ligne 1, 1 pour la ligne 2, etc.</param>
            <param name="startColumn">Colonne à partir de laquelle écrire les données. Saisissez 0 pour la colonne A, 1 pour la colonne B, etc.</param>
            <param name="data">Données à écrire dans la feuille de calcul</param>
            <param name="overWrite">Indique si la feuille de calcul doit être effacée avant l'écriture</param>
            <param name="writeAsString">Indique si les données doivent être écrites dans le fichier Excel soit en tant que chaînes</param>
            <returns name="data">Lignes de données extraites de la feuille de calcul Excel</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Pour lire des données à partir d'une feuille de calcul Microsoft Excel, utilisez la norme Open XML.
            Les données sont lues par ligne et renvoyées dans une série de listes par ligne.
            Les lignes et les colonnes sont indexées à zéro. Par exemple, la valeur de la cellule A1 apparaît dans la liste de données à [0,0].</summary>
            <param name="filePath">Fichier représentant le classeur Excel</param>
            <param name="sheetName">Nom de la feuille de calcul contenant les données</param>
            <param name="startRow">Ligne de départ pour la lecture des données. Entrez 0 pour la ligne 1, 1 pour la ligne 2, etc.</param>
            <param name="startColumn">Colonne de départ pour la lecture des données. Entrez 0 pour la colonne A, 1 pour la colonne B, etc.</param>
            <param name="readAsString">Indique si les cellules doivent être lues en tant que chaînes</param>
            <returns name="data">Lignes de données extraites de la feuille de calcul Excel</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Pour écrire des données dans une feuille de calcul Microsoft Excel, utilisez la norme Open XML.
            Les données sont écrites par ligne avec des sous-listes dans des lignes successives.
            Les lignes et les colonnes sont indexées à zéro. Par exemple, la valeur de la liste de données à [0,0] sera
            écrite dans la cellule A1. Les valeurs nulles et les listes vides sont écrites en tant que cellules vides.</summary>
            <param name="filePath">Fichier représentant le classeur Excel</param>
            <param name="sheetName">Nom de la feuille de calcul contenant les données</param>
            <param name="startRow">Ligne à partir de laquelle écrire les données. Entrez 0 pour la ligne 1, 1 pour la ligne 2, etc.</param>
            <param name="startColumn">Colonne à partir de laquelle écrire les données. Entrez 0 pour la colonne A, 1 pour la colonne B, etc.</param>
            <param name="data">Données à écrire dans la feuille de calcul</param>
            <param name="overWrite">Indique si la feuille de calcul doit être effacée avant l'écriture</param>
            <param name="writeAsString">Indique si les valeurs de cellule doivent être écrites sous forme de chaînes</param>
            <search>office,excel,spreadsheet</search>
            <returns>Valeur booléenne indiquant si l'écriture dans la feuille de calcul réussit.</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>Détaille la lecture et l'écriture de fichiers Excel à l'aide du SDK Open XML.</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Lit les données d'une feuille de calcul Excel à l'aide du SDK Open XML.</summary>
            <param name="filePath">Chemin d'accès au fichier de classeur Excel</param>
            <param name="sheetName">Nom de la feuille à lire dans le classeur</param>
            <param name="startRow">Ligne où commencer la lecture (zéro)</param>
            <param name="startColumn">Colonne où commencer la lecture (zéro)</param>
            <param name="readAsString">Indique si les valeurs des cellules doivent être lues en tant que chaînes</param>
            <returns>Valeurs de cellule lues à partir de la feuille de calcul</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Écrit les données dans une feuille de calcul Excel à l'aide du SDK Open XML.</summary>
            <param name="filePath">Chemin d'accès au fichier de classeur Excel. S'il n'existe pas, un nouveau classeur est créé.</param>
            <param name="sheetName">Nom de la feuille à écrire dans le classeur</param>
            <param name="data">Valeurs de données à écrire dans les cellules de la feuille</param>
            <param name="startRow">Ligne à partir de laquelle commencer l'écriture (zéro)</param>
            <param name="startColumn">Colonne à partir de laquelle commencer l'écriture (zéro)</param>
            <param name="overWrite">Indique si la feuille doit être recréée avant l'écriture</param>
            <param name="writeAsString">Indique si les valeurs de données doivent être écrites en tant que chaînes ou non</param>
            <returns>Valeur booléenne indiquant si l'écriture dans la feuille de calcul réussit.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>Selon les données d'une feuille de calcul, renvoie l'index de la plus grande colonne pour toutes les lignes.</summary>
            <param name="sheetData">Données de la feuille de calcul</param>
            <returns>Le plus grand index de colonne trouvé</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>Selon les index de colonne et de ligne, tels que 3 et 7, renvoie la référence de cellule, C7 dans ce cas.</summary>
            <param name="columnIndex">Index de colonne (1)</param>
            <param name="rowIndex">Index de ligne (1)</param>
            <returns>Référence de cellule qui correspond à la colonne et à l'index fournis</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>Selon la référence de cellule, par exemple C7, renvoie l'index de colonne, C = 3 dans ce cas.</summary>
            <param name="cellReference">Référence de cellule, par exemple C7</param>
            <returns>Index de colonne (1) équivalent à la séquence de lettres identifiant la colonne de cellule</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Extrait la valeur de la cellule, éventuellement en la convertissant en chaîne.</summary>
            <param name="cell">Cellule à partir de laquelle extraire la valeur</param>
            <param name="sharedStringTable">Structure de la feuille de calcul contenant les valeurs de chaîne réelles</param>
            <param name="stylesheet">Section Style de la feuille de calcul contenant des informations de formatage</param>
            <param name="readAsString">Si la valeur est Vrai, une chaîne est renvoyée au lieu de la valeur de cellule réelle</param>
            <returns>Valeur à l'intérieur de la cellule, éventuellement convertie en chaîne</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Extrait la feuille de calcul avec le nom spécifié dans le document.</summary>
            <param name="document">Documenter l'emplacement d'obtention de la feuille de calcul</param>
            <param name="sheetName">Nom de la feuille à obtenir</param>
            <returns>Feuille portant le nom spécifié ou valeur nulle si elle est introuvable</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>Vérifie si les données transmises contiennent une fonction.</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>Ouvre un classeur existant ou en crée un à partir de zéro sur le chemin de fichier spécifié.</summary>
            <param name="filePath">Chemin d'accès au fichier dans lequel le classeur est ou doit être créé</param>
            <param name="sheetName">Si un nouveau classeur est créé, la feuille utilise ce nom</param>
            <returns>Un document de feuille de calcul</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>Ajoute des styles par défaut à la feuille de style afin qu'elle ne soit pas détectée comme étant corrompue par Office.</summary>
            <param name="stylesheet">Section Feuille de styles d'un nouveau document</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>Supprime une feuille de calcul du document.</summary>
            <param name="document">Document duquel supprimer la feuille de calcul</param>
            <param name="worksheetPart">Feuille de calcul à supprimer</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Ajoute une feuille de calcul au document.</summary>
            <param name="document">Document auquel ajouter la feuille de calcul</param>
            <param name="sheetName">Nom de la feuille de calcul à ajouter</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Définit la valeur d'une cellule, éventuellement après l'avoir convertie en chaîne.</summary>
            <param name="value">Valeur à définir dans la cellule</param>
            <param name="cell">Cellule dans laquelle définir la valeur</param>
            <param name="sharedStringTable">Structure de la feuille de calcul contenant les valeurs de chaîne réelles</param>
            <param name="stylesheet">Section Style de la feuille de calcul contenant des informations de formatage</param>
            <param name="writeAsString">Si la valeur est Vrai, la valeur est convertie en chaîne avant l'écriture dans la cellule</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>Une classe de ressource fortement typée, pour la recherche de chaînes localisées, etc.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>Renvoie l'instance ResourceManager mise en cache utilisée par cette classe.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources qui utilisent cette classe de ressource fortement typée.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>Recherche une chaîne localisée similaire à Erreur lors de la configuration de la communication avec Excel. Essayez de fermer toutes les instances d'Excel ouvertes..</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>Recherche une chaîne localisée semblable à la suivante: Excel n'est pas installé. href=ExcelNotInstalled.html.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>Recherche une chaîne localisée similaire à Un ou plusieurs des types d'entrées ne correspondent pas. Impossible de trouver une version de {0} qui accepte les arguments de type {1}.
.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>Recherche une chaîne localisée similaire à Utilisez le noeud File.FromPath -&gt; Excel.ReadFromFile à la place..</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>Recherche une chaîne localisée similaire à "Classeur introuvable dans le chemin d'accès fourni".</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>Recherche une chaîne localisée similaire à "Aucune feuille de calcul portant le nom '{0}' trouvée dans le classeur".</summary>
        </member>
    </members>
</doc>