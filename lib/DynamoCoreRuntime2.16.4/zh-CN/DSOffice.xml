<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>检查 Excel 进程是否正在运行</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>检查此对象是否包含 Excel 的参照</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>关闭所有 Excel 工作表，必要时提供“另存为”对话框。 此外，执行
            垃圾收集并删除 Excel 应用程序的参照</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>读取给定 Excel 文件并返回工作簿</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>返回给定 Excel 工作簿中存在的所有工作表的列表</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>按名称返回给定工作簿中的工作表</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>从给定 Excel 工作表读取和检索数据</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>写下给定工作表指定行和列编号（基础 0）的给定数据，
            然后返回工作表</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>将具有给定名称的新 Excel 工作表添加至给定工作簿</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>创建临时的新 Excel 工作簿</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>将给定 Excel 工作簿保存至指定文件路径，并将其返回</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>从 Microsoft Excel 电子表格读取数据。按行读取数据并
                按行返回到一系列列表中。行和列是零索引；
                例如，A1 单元中的值将出现在 [0,0] 处数据列表中。
                该节点需要安装 Microsoft Excel。</summary>
            <param name="file">表示 Microsoft Excel 电子表格的文件。</param>
            <param name="sheetName">包含此数据的工作表的名称。</param>
            <param name="readAsStrings">单击以切换是否将 Excel 文件仅读取为字符串</param>
            <param name="showExcel">单击以在显示和隐藏主 Excel 窗口之间切换</param>
            <returns name="data">Excel 工作表的数据行。</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>将数据写入 Microsoft Excel 电子表格。按行写入数据，
                子列表将写入后续行。行和列是
                零索引；例如，[0,0] 处数据列表的数据将
                写入 A1 单元。空值或空列表作为空单元
 被写入 Excel。该节点需要安装　Microsoft Excel。</summary>
            <param name="filePath">Microsoft Excel 电子表格的文件路径。</param>
            <param name="sheetName">要写入数据的工作表名称。</param>
            <param name="startRow">用于写入数据的起始行。为第 1 行输入 0，为第 2 行输入 1，以此类推。</param>
            <param name="startCol">用于写入数据的起始列。为 A 列输入 0，为 B 列 输入 1，以此类推。</param>
            <param name="data">要写入电子表格的数据。</param>
            <param name="overWrite"/>
            <returns name="data">已写入电子表格的数据。</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>从给定工作表返回数据 (GetDataFromExcelWorksheet 节点)</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>由给定工作表和名称创建新工作簿（AddExcelWorksheetToWorkbook 节点）</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>实例方法，将数据写入到现有工作表 (WriteDataToExcelWorksheet 节点)</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(GetWorksheetsFromExcelWorkbook 节点）</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>创建新工作簿，其输入内容为文件路径和图纸名称</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>读取包含禁用可见性的工作簿的帮助程序方法。</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(SaveAsExcelWorkbook 节点）</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(ReadExcelFile 节点）</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>实例方法，(GetExcelWorksheetByName 节点)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>导入/导出类别的方法。</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>使用逗号分隔值格式将列表清单写入文件。
                外部列表表示行，内部列表表示列。</summary>
            <param name="filePath">要写入到的路径</param>
            <param name="data">要写入 CSV 的列表清单</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>从 CSV (逗号分隔值)文件导入数据，将条目放入列表并
                进行转置(如有需要)。</summary>
            <param name="filePath">要转换为列表的 CSV 文件</param>
            <param name="transpose">切换为转置导入的数据</param>
            <returns name="list">包含 CSV 文件中条目的列表</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>从 Microsoft Excel 电子表格读取数据。按行读取数据并
                按行返回到一系列列表中。行和列是零索引；
                例如，A1 单元中的值将出现在 [0,0] 处数据列表中。
                该节点需要安装 Microsoft Excel。</summary>
            <param name="file">表示 Excel 工作簿的文件</param>
            <param name="sheetName">包含数据的工作表的名称</param>
            <param name="readAsStrings">切换为字符串形式读取单元格</param>
            <param name="showExcel">切换为显示 Excel 的主窗口</param>
            <returns name="data">Excel 工作表中的数据行</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>将数据写入 Microsoft Excel 电子表格。按行写入数据，
                子列表将写入后续行。行和列是
                零索引；例如，[0,0] 处数据列表的数据将
                写入 A1 单元。空值或空列表作为空单元
 被写入 Excel。该节点需要安装　Microsoft Excel。</summary>
            <param name="filePath">Microsoft Excel 电子表格的文件路径</param>
            <param name="sheetName">要向其写入数据的工作表名称</param>
            <param name="startRow">用于写入数据的起始行。为第 1 行输入 0，为第 2 行输入 1，以此类推。</param>
            <param name="startColumn">要写入数据的起始列。输入 0 表示列 A，输入 1 表示列 B，以此类推。</param>
            <param name="data">要写入电子表格的数据</param>
            <param name="overWrite">要覆盖文件，则为 true；不要覆盖，则为 false</param>
            <returns name="data">已写入电子表格的数据</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>将数据写入 Microsoft Excel 电子表格。按行写入数据，
                子列表将写入后续行。行和列是
                零索引；例如，[0,0] 处数据列表的数据将
                写入 A1 单元。空值或空列表作为空单元
 被写入 Excel。该节点需要安装 Microsoft Excel。</summary>
            <param name="filePath">表示 Excel 工作簿的文件</param>
            <param name="sheetName">包含数据的工作表的名称</param>
            <param name="startRow">用于写入数据的起始行。为第 1 行输入 0，为第 2 行输入 1，以此类推。</param>
            <param name="startColumn">要写入数据的起始列。输入 0 表示列 A，输入 1 表示列 B，以此类推。</param>
            <param name="data">要写入电子表格的数据</param>
            <param name="overWrite">切换为在写入之前清除电子表格</param>
            <param name="writeAsString">切换为在以字符串形式写入 Excel 文件之间切换</param>
            <returns name="data">Excel 工作表中的数据行</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>使用 Open XML 标准，从 Microsoft Excel 电子表格中读取数据。
            数据按行读取，并按行返回在一系列列表中。
            行和列的索引以零开始，例如，单元格 A1 中的值将
            显示在数据列表中的 [0,0] 处。</summary>
            <param name="filePath">表示 Excel 工作簿的文件</param>
            <param name="sheetName">包含数据的工作表的名称</param>
            <param name="startRow">读取数据的起始行。输入 0 表示行 1，输入 1 表示行 2，依此类推。</param>
            <param name="startColumn">读取数据的起始列。输入 0 表示列 A，输入 1 表示列 B，依此类推。</param>
            <param name="readAsString">切换为字符串形式读取单元格</param>
            <returns name="data">Excel 工作表中的数据行</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>使用 Open XML 标准，将数据写入 Microsoft Excel 电子表格。
            数据按行写入，其中子列表以连续行形式写入。
            行和列表的索引以零开始，例如，数据列表中 [0,0] 处的值将
            写入单元格 A1。空值和空列表将作为空单元格写入。</summary>
            <param name="filePath">表示 Excel 工作簿的文件</param>
            <param name="sheetName">包含数据的工作表的名称</param>
            <param name="startRow">写入数据的起始行。输入 0 表示行 1，输入 1 表示行 2，依此类推。</param>
            <param name="startColumn">写入数据的起始列。输入 0 表示列 A，输入 1 表示列 B，依此类推。</param>
            <param name="data">要写入电子表格的数据</param>
            <param name="overWrite">切换为在写入之前清除电子表格</param>
            <param name="writeAsString">切换为切换以字符串形式写入单元格值</param>
            <search>office,excel,spreadsheet</search>
            <returns>指示写入电子表格是否成功的布尔值。</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>使用 Open XML SDK 处理 Excel 文件的读写。</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>使用 Open XML SDK，从 Excel 电子表格中读取数据。</summary>
            <param name="filePath">Excel 工作簿文件的路径</param>
            <param name="sheetName">要从工作簿内读取的工作表名称</param>
            <param name="startRow">要开始读取的行(从零开始)</param>
            <param name="startColumn">要开始读取的列(从零开始)</param>
            <param name="readAsString">是否要以字符串形式读取单元格值</param>
            <returns>从电子表格中读取的单元格值</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>使用 Open XML SDK，将数据写入 Excel 电子表格。</summary>
            <param name="filePath">Excel 工作簿文件的路径。如果该路径不存在，将创建一个新的工作簿。</param>
            <param name="sheetName">要写入工作簿内的工作表名称</param>
            <param name="data">要写入工作表的单元格的数据值</param>
            <param name="startRow">要开始写入的行(从零开始)</param>
            <param name="startColumn">要开始写入的列(从零开始)</param>
            <param name="overWrite">是否应在写入之前重新创建工作表</param>
            <param name="writeAsString">是否数据值应以字符串形式写入</param>
            <returns>指示写入电子表格是否成功的布尔值。</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>如果给定工作表的数据，则会返回任何行的最大列索引。</summary>
            <param name="sheetData">工作表的数据</param>
            <returns>已找到最大列索引</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>如果给定列和行索引(如 3 和 7)，则会返回单元格引用(在本例中为 C7)。</summary>
            <param name="columnIndex">列索引(从 1 开始)</param>
            <param name="rowIndex">行索引(从 1 开始)</param>
            <returns>与提供的列和索引匹配的单元格引用</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>如果给定单元格引用(如 C7)，则会返回列索引(在本例中为 C = 3)。</summary>
            <param name="cellReference">单元格引用，如 C7</param>
            <returns>列索引(从 1 开始)等同于标识单元格列的字母序列</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>获取单元格中的值，(可选)将其转换为字符串。</summary>
            <param name="cell">要获取其值的单元格</param>
            <param name="sharedStringTable">包含实际字符串值的电子表格的结构</param>
            <param name="stylesheet">电子表格的“样式”部分，包含格式设置信息</param>
            <param name="readAsString">如果为 true，将返回字符串，而不是实际单元格值</param>
            <returns>单元格内部的值，可能已转换为字符串</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>从文档中获取具有指定名称的工作表。</summary>
            <param name="document">要从其中获取工作表的文档</param>
            <param name="sheetName">要获取的工作表的名称</param>
            <returns>具有指定名称的工作表；如果找不到，则为 Null</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>检查传入的数据是否包含函数。</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>打开现有工作簿，或在指定文件路径上从头开始创建一个工作簿。</summary>
            <param name="filePath">工作簿所在或应在其中创建工作簿的文件路径</param>
            <param name="sheetName">如果创建了新工作簿，工作表将使用此名称</param>
            <returns>电子表格文档</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>将默认样式添加到样式表，以便 Office 不会将电子表格标识为已损坏。</summary>
            <param name="stylesheet">新文档的“样式表”部分</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>从文档中删除工作表。</summary>
            <param name="document">要从其中删除工作表的文档</param>
            <param name="worksheetPart">要删除的工作表</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>将工作表添加到文档。</summary>
            <param name="document">要向其添加工作表的文档</param>
            <param name="sheetName">要添加的工作表的名称</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>设置单元格的值，(可选)先将其转换为字符串。</summary>
            <param name="value">要在单元格中设置的值</param>
            <param name="cell">要设置其中值的单元格</param>
            <param name="sharedStringTable">包含实际字符串值的电子表格的结构</param>
            <param name="stylesheet">电子表格的“样式”部分，包含格式设置信息</param>
            <param name="writeAsString">如果为 true，则值将在写入单元格之前转换为字符串</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>强类型资源类别，用于查看本地化字符串等。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>返回该类别所用的缓存 ResourceManager 实例。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>使用该强类型资源类别，替换用于查找所有资源的
              当前线程的 CurrentUICulture 特性。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>查找类似“与 Excel 设置通信时出错。尝试关闭所有打开的 Excel 实例。”的本地化字符串。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>查找类似“Excel 未安装。”的本地化字符串。href=ExcelNotInstalled.html。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>查找类似“一个或多个输入类型不匹配”的本地化字符串。找不到采用类型 {1} 参数的 {0} 的版本。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>查找类似“而是使用 File.FromPath -&gt; Excel.ReadFromFile 节点。”的本地化字符串。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>查找类似“在提供的路径中未找到工作簿。”的本地化字符串。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>查找类似“在工作簿中未找到提供名称为 '{0}' 的工作表。”的本地化字符串。</summary>
        </member>
    </members>
</doc>