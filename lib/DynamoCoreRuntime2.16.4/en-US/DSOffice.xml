<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>
            Check if the excel process is running
            </summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>
            Check if this object holds a reference to Excel
            </summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>
            Close all Excel workbooks and provide SaveAs dialog if needed.  Also, perform
            garbage collection and remove references to Excel App
            </summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>
            Reads the given Excel file and returns a workbook
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>
            Returns a list of all the worksheets present in the given Excel workbook
            </summary>
            <param name="workbook"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>
            Returns the worksheet in the given workbook by its name
            </summary>
            <param name="workbook"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>
            Reads and retrieves the data from the given Excel worksheet
            </summary>
            <param name="worksheet"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>
            Writes the given data at the specified row and column no. (base 0) in the given worksheet
            and returns the worksheet
            </summary>
            <param name="worksheet"></param>
            <param name="startRow"></param>
            <param name="startColumn"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>
            Adds a new Excel worksheet with the given name to the given workbook        
            </summary>
            <param name="workbook"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>
            Creates a new temporary Excel workbook
            </summary>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>
            Saves the given Excel workbook to the specified file path and returns it
            </summary>
            <param name="workbook"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
                Read data from a Microsoft Excel spreadsheet. Data is read by row and
                returned in a series of lists by row. Rows and columns are zero-indexed;
                for example, the value in cell A1 will appear in the data list at [0,0].
                This node requires Microsoft Excel to be installed.
            </summary>
            <param name="file">File representing the Microsoft Excel spreadsheet.</param>
            <param name="sheetName">Name of the worksheet containing the data.</param>
            <param name="readAsStrings">toggle to switch between reading Excel file as strings only or not</param>
            <param name="showExcel">toggle to switch between showing and hiding the main Excel window</param>
            <returns name="data">Rows of data from the Excel worksheet.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>
                Write data to a Microsoft Excel spreadsheet. Data is written by row
                with sublists to be written in successive rows. Rows and columns are
                zero-indexed; for example, the value in the data list at [0,0] will
                be written to cell A1. Null values and empty lists are written to Excel 
                as empty cells. This node requires Microsoft Excel to be installed. 
            </summary>
            <param name="filePath">File path to the Microsoft Excel spreadsheet.</param>
            <param name="sheetName">Name of the workseet to write data to.</param>
            <param name="startRow">Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.</param>
            <param name="startCol">
                Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.
            </param>
            <param name="data">Data to write to the spreadsheet.</param>
            <param name="overWrite"></param>
            <returns name="data">Data written to the spreadsheet.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>
            Returns data from given worksheet (GetDataFromExcelWorksheet node)
            </summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>
            create new worksheet from given workbook and name (AddExcelWorksheetToWorkbook node)
            </summary>
            <param name="wbook"></param>
            <param name="sheetName"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>
            instance method, write data to existing worksheet, (WriteDataToExcelWorksheet node)
            </summary>
            <param name="startRow"></param>
            <param name="startColumn"></param>
            <param name="data"></param>
            <param name="writeAsString"></param>
            <returns></returns>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>
            (GetWorksheetsFromExcelWorkbook node)
            </summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>
            Creates a new Workbook with filepath and sheet name as input
            </summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>
            Helper method for reading workbooks with a disabled visibility.
            </summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>
            (SaveAsExcelWorkbook node)
            </summary>
            <param name="wbook"></param>
            <param name="filename"></param>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>
            (ReadExcelFile node)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>
            instance method, (GetExcelWorksheetByName node)
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="T:DSOffice.Data">
            <summary>
                Methods for Import/Export category.
            </summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>
                Write a list of lists into a file using a comma-separated values 
                format. Outer list represents rows, inner lists represent columns. 
            </summary>
            <param name="filePath">Path to write to</param>
            <param name="data">List of lists to write into CSV</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>
                Imports data from a CSV (comma separated values) file, put the items into a list and 
                transpose it if needed.
            </summary>
            <param name="filePath">CSV file to be converted into a list</param>
            <param name="transpose">Toggle to transpose the imported data</param>
            <returns name="list">List containing the items in the CSV file</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
                Read data from a Microsoft Excel spreadsheet. Data is read by row and
                returned in a series of lists by row. Rows and columns are zero-indexed;
                for example, the value in cell A1 will appear in the data list at [0,0].
                This node requires Microsoft Excel to be installed.
            </summary>
            <param name="file">File representing the Excel workbook</param>
            <param name="sheetName">Name of the worksheet containing data</param>
            <param name="readAsStrings">Toggle to read cells as strings</param>
            <param name="showExcel">Toggle to show excel's main window</param>
            <returns name="data">Rows of data from the Excel worksheet</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>
                Write data to a Microsoft Excel spreadsheet. Data is written by row
                with sublists to be written in successive rows. Rows and columns are
                zero-indexed; for example, the value in the data list at [0,0] will
                be written to cell A1. Null values and empty lists are written to Excel 
                as empty cells. This node requires Microsoft Excel to be installed. 
            </summary>
            <param name="filePath">File path to the Microsoft Excel spreadsheet</param>
            <param name="sheetName">Name of the workseet to write data to</param>
            <param name="startRow">Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.</param>
            <param name="startColumn">
                Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.
            </param>
            <param name="data">Data to write to the spreadsheet</param>
            <param name="overWrite">True to overwrite file, false not to overwrite</param>
            <returns name="data">Data written to the spreadsheet</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>
                Write data to a Microsoft Excel spreadsheet. Data is written by row
                with sublists to be written in successive rows. Rows and columns are
                zero-indexed; for example, the value in the data list at [0,0] will
                be written to cell A1. Null values and empty lists are written to Excel 
                as empty cells. This node requires Microsoft Excel to be installed. 
            </summary>
            <param name="filePath">File representing the Excel workbook</param>
            <param name="sheetName">Name of the worksheet containing data</param>
            <param name="startRow">Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.</param>
            <param name="startColumn">
                Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.
            </param>
            <param name="data">Data to write to the spreadsheet</param>
            <param name="overWrite"> Toggle to clear spreadsheet before writing</param>
            <param name="writeAsString">Toggle to switch between writing Excel file as strings</param>
            <returns name="data">Rows of data from the Excel worksheet</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Read data from a Microsoft Excel spreadsheet by using the Open XML standard.
            Data is read by row and returned in a series of lists by row.
            Rows and columns are zero-indexed; for example, the value in cell A1 will
            appear in the data list at [0,0].
            </summary>
            <param name="filePath">File representing the Excel workbook</param>
            <param name="sheetName">Name of the worksheet containing data</param>
            <param name="startRow">Start row for reading data. Enter 0 for Row 1, 1 for Row 2, etc.</param>
            <param name="startColumn">Start column for reading data. Enter 0 for Column A, 1 for Column B, etc.</param>
            <param name="readAsString">Toggle to read cells as strings</param>
            <returns name="data">Rows of data from the Excel worksheet</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Write data to a Microsoft Excel spreadsheet by using the Open XML standard.
            Data is written by row with sublists to be written in successive rows.
            Rows and columns are zero-indexed; for example, the value in the data list at [0,0] will
            be written to cell A1. Null values and empty lists are written as empty cells.
            </summary>
            <param name="filePath">File representing the Excel workbook</param>
            <param name="sheetName">Name of the worksheet containing data</param>
            <param name="startRow">Start row for writing data. Enter 0 for Row 1, 1 for Row 2, etc.</param>
            <param name="startColumn">Start column for writing data. Enter 0 for Column A, 1 for Column B, etc.</param>
            <param name="data">Data to write to the spreadsheet</param>
            <param name="overWrite"> Toggle to clear spreadsheet before writing</param>
            <param name="writeAsString">Toggle to switch between writing cell values as strings</param>
            <search>office,excel,spreadsheet</search>
            <returns>Boolean indicating if writing to spreadsheet is successful.</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>
            Deals with reading and writing Excel files using the Open XML SDK.
            </summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads data from an Excel spreadsheet using the Open XML SDK.
            </summary>
            <param name="filePath">Path to the Excel workbook file</param>
            <param name="sheetName">Name of the sheet to read from inside the workbook</param>
            <param name="startRow">Row where to begin reading from (zero-based)</param>
            <param name="startColumn">Column where to begin reading from (zero-based)</param>
            <param name="readAsString">Whether to read cell values as strings or not</param>
            <returns>Cell values read from the spreadsheet</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Writes data to an Excel spreadsheet using the Open XML SDK.
            </summary>
            <param name="filePath">Path to the Excel workbook file. If it does not exist, a new workbook will be created.</param>
            <param name="sheetName">Name of the sheet to write to inside the workbook</param>
            <param name="data">Data values to be written to the sheet's cells</param>
            <param name="startRow">Row where to begin writing from (zero-based)</param>
            <param name="startColumn">Column where to begin writing from (zero-based)</param>
            <param name="overWrite">Whether the sheet should be re-created before writing</param>
            <param name="writeAsString">Whether data values should be written as strings or not</param>
            <returns>Boolean indicating if writing to spreadsheet is successful.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>
            Given a worksheet's data it returns the largest column index for any rows.
            </summary>
            <param name="sheetData">Worksheet's data</param>
            <returns>The largest column index found</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>
            Given the column and row indices, like 3 and 7, it returns the cell reference, C7 in this case.
            </summary>
            <param name="columnIndex">Column index (1-based)</param>
            <param name="rowIndex">Row index (1-based)</param>
            <returns>The cell reference that matches the provided column and index</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>
            Given a cell reference, like C7, it returns the column index, C = 3 in this case.
            </summary>
            <param name="cellReference">A cell reference like C7</param>
            <returns>The column index (1-based) equivalent to the letter sequence identifying the cell column</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>
            Gets the value from the cell, optionally converting it to a string.
            </summary>
            <param name="cell">Cell to get the value from</param>
            <param name="sharedStringTable">Structure of the spreadsheet that contains the actual string values</param>
            <param name="stylesheet">Style section of the spreadsheet, containing formatting information</param>
            <param name="readAsString">When true, a string will be returned rather than the actual cell value</param>
            <returns>The value inside of the cell, possibly converted to a string</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>
            Gets the worksheet with the specified name from the document.
            </summary>
            <param name="document">Document where to obtain the worksheet from</param>
            <param name="sheetName">Name of the sheet to obtain</param>
            <returns>The sheet with the specified name or null if it was not found</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>
            Checks whether the passed in data contains a function.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>
            Opens an existing workbook or creates one from scratch on the specified file path.
            </summary>
            <param name="filePath">File path where the workbook is or should be created</param>
            <param name="sheetName">In case a new workbook is created, the sheet will use this name</param>
            <returns>A spreadsheet document</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>
            Adds default styles to the stylesheet so that Office does not identify the spreadsheet as corrupt.
            </summary>
            <param name="stylesheet">Stylesheet section of a new document</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Removes a worksheet from the document.
            </summary>
            <param name="document">Document to remove the worksheet from</param>
            <param name="worksheetPart">Worksheet to be removed</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>
            Adds a worksheet to the document.
            </summary>
            <param name="document">Document to add the wroksheet to</param>
            <param name="sheetName">Name of the worksheet to be added</param>
            <returns></returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>
            Sets the value of a cell, optionally converting it to a string first.
            </summary>
            <param name="value">Value to set in the cell</param>
            <param name="cell">Cell where to set the value</param>
            <param name="sharedStringTable">Structure of the spreadsheet that contains the actual string values</param>
            <param name="stylesheet">Style section of the spreadsheet, containing formatting information</param>
            <param name="writeAsString">When true, the value will be converted to a string before writing to the cell</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>
              Looks up a localized string similar to Error setting up communication with Excel.  Try closing any open Excel instances..
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>
              Looks up a localized string similar to Excel is not installed. href=ExcelNotInstalled.html.
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>
              Looks up a localized string similar to One or more of the input types are not matching. Couldn&apos;t find a version of {0} that takes arguments of type {1}.
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>
              Looks up a localized string similar to Use File.FromPath -&gt; Excel.ReadFromFile node instead..
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>
              Looks up a localized string similar to A workbook was not found in the provided path..
            </summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>
              Looks up a localized string similar to A worksheet with the provided name &apos;{0}&apos; was not found in the workbook..
            </summary>
        </member>
    </members>
</doc>
