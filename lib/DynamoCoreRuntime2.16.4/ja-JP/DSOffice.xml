<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>Excel 処理が実行中かどうかをチェック</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>このオブジェクトが Excel への参照を保持しているかどうかをチェック</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>すべての Excel ワークブックを閉じます。必要に応じて[名前を付けて保存]ダイアログが表示されます。さらに、
            ガベージ コレクションを実行し、Excel アプリへの参照を削除します</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>指定した Excel ファイルを読み取って、ワークブックを返します</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>指定した Excel ワークブック内にあるすべてのワークシートのリストを返します</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>指定したワークブック内にあるワークシートをワークシートの名前で返します</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>指定した Excel ワークシートからデータを読み取って取得します</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>指定したデータを、指定したワークシートの指定した行と列番号(基数 0)に書き込み、
            ワークシートを返します</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>新しい Excel ワークシートの名前を指定して、指定したワークブックに追加します</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>一時的な Excel ワークブックを新たに作成します</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>指定した Excel ワークブックを指定したファイル パスに保存して、ファイル パスを返します</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Microsoft Excel スプレッドシートからデータを読み込みます。データは行ごとに読み込まれ、
                行ごとの一連のリストで返されます。行と列のインデックスはゼロから始まります。
                たとえば、セル A1 の値はデータリストの[0,0]に表示されます。
                このノードには Microsoft Excel をインストールする必要があります。</summary>
            <param name="file">Microsoft Excel スプレッドシートを表すファイル。</param>
            <param name="sheetName">データを含むワークシートの名前。</param>
            <param name="readAsStrings">Excel ファイルを文字列としてのみ読み込むかどうかを切り替え</param>
            <param name="showExcel">メインの Excel ウィンドウの表示と非表示を切り替え</param>
            <returns name="data">Excel ワークシートのデータの行。</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Microsoft Excel スプレッドシートにデータを書き込みます。データは行ごとに書き込まれ、
                サブリストは後続の行に書き込まれます。行と列は
                ゼロから数えます。たとえば、データ リストの[0,0]の値はセル A1 に
                書き込まれます。NULL 値と空のリストは空のセルとして Excel に書き込まれ
                ます。このノードには Microsoft Excel をインストールする必要があります。</summary>
            <param name="filePath">Microsoft Excel スプレッドシートへのファイル パス。</param>
            <param name="sheetName">データの書き込み先のワークシートの名前。</param>
            <param name="startRow">データ書き込みの開始行。1 行目の場合は 0、2 行目の場合は 1 のように入力します。</param>
            <param name="startCol">データ書き込みの開始列。A 列の場合は 0、B 列の場合は 1 のように入力します。</param>
            <param name="data">スプレッドシートに書き込むデータ。</param>
            <param name="overWrite"/>
            <returns name="data">スプレッドシートに書き込まれたデータ。</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>指定したワークシートからデータを返します(GetDataFromExcelWorksheet ノード)</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>指定したワークブックと名前から新しいワークシートを作成(AddExcelWorksheetToWorkbook ノード)</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>インスタンス メソッド、既存のワークシートにデータを書き出す、(WriteDataToExcelWorksheet ノード)</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(GetWorksheetsFromExcelWorkbook ノード)</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>ファイル パスとシート名を入力として使用し、新しい Workbook を作成します。</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>表示が無効なワークブックを読み込むためのヘルパ メソッドです。</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(SaveAsExcelWorkbook ノード)</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(ReadExcelFile ノード)</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>インスタンス メソッド、(GetExcelWorksheetByName ノード)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>読み込み/書き出しカテゴリのメソッド。</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>カンマ区切り値の形式を使用して、リストのリストをファイルに書き出します。
                外側のリストが行を表し、内側のリストが列を表します。</summary>
            <param name="filePath">書き込み先のパス</param>
            <param name="data">CSV に書き込むリストのリスト</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>CSV (カンマ区切り値)ファイルからデータを読み込み、項目をリスト内に挿入し、
                必要に応じてリストの行列を入れ替えます。</summary>
            <param name="filePath">リストに変換する CSV ファイル</param>
            <param name="transpose">読み込まれたデータを転置するかどうかを切り替え</param>
            <returns name="list">CSV ファイル内の項目が含まれているリスト</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Microsoft Excel スプレッドシートからデータを読み込みます。データは行ごとに読み込まれ、
                行ごとの一連のリストで返されます。行と列のインデックスはゼロから始まります。
                たとえば、セル A1 の値はデータ リストの[0,0]に表示されます。
                このノードには Microsoft Excel をインストールする必要があります。</summary>
            <param name="file">Excel ワークブックを表すファイル</param>
            <param name="sheetName">データを含むワークシートの名前</param>
            <param name="readAsStrings">セルを文字列として読み込むかどうかを切り替え</param>
            <param name="showExcel">Excel のメインのウィンドウを表示するかどうかを切り替え</param>
            <returns name="data">Excel ワークシートのデータの行</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Microsoft Excel スプレッドシートにデータを書き込みます。データは行ごとに書き込まれ、
                サブリストは後続の行に書き込まれます。行と列は
                ゼロから数えます。たとえば、データ リストの[0,0]の値はセル A1 に
                書き込まれます。NULL 値と空のリストは空のセルとして Excel に書き込まれ
                ます。このノードには Microsoft Excel をインストールする必要があります。</summary>
            <param name="filePath">Microsoft Excel スプレッドシートへのファイル パス</param>
            <param name="sheetName">データの書き込み先のワークシートの名前</param>
            <param name="startRow">データ書き込みの開始行。1 行目の場合は 0、2 行目の場合は 1 のように入力します。</param>
            <param name="startColumn">データ書き込みの開始列。A 列の場合は 0、B 列の場合は 1 のように入力します。</param>
            <param name="data">スプレッドシートに書き込むデータ</param>
            <param name="overWrite">ファイルを上書きする場合は true、上書きしない場合は false</param>
            <returns name="data">スプレッドシートに書き込まれたデータ</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>Microsoft Excel スプレッドシートにデータを書き込みます。データは行ごとに書き込まれ、
                サブリストは後続の行に書き込まれます。行と列は
                ゼロから数えます。たとえば、データ リストの[0,0]の値はセル A1 に
                書き込まれます。NULL 値と空のリストは空のセルとして Excel に書き込まれ
                ます。このノードには Microsoft Excel をインストールする必要があります。</summary>
            <param name="filePath">Excel ワークブックを表すファイル</param>
            <param name="sheetName">データを含むワークシートの名前</param>
            <param name="startRow">データ書き込みの開始行。1 行目の場合は 0、2 行目の場合は 1 のように入力します。</param>
            <param name="startColumn">データ書き込みの開始列。A 列の場合は 0、B 列の場合は 1 のように入力します。</param>
            <param name="data">スプレッドシートに書き込むデータ</param>
            <param name="overWrite">書き込み前にスプレッドシートをクリアするかどうかを切り替え</param>
            <param name="writeAsString">Excel ファイルを文字列として書き込むかどうかを切り替え</param>
            <returns name="data">Excel ワークシートのデータの行</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Open XML 標準を使用して、Microsoft Excel スプレッドシートからデータを読み込みます。
            データは行ごとに読み込まれ、行ごとの一連のリストで返されます。
            行と列はゼロから数えます。たとえば、セル A1 の値は
            データ リストの[0,0]に表示されます。</summary>
            <param name="filePath">Excel ブックを表すファイル</param>
            <param name="sheetName">データを含むワークシートの名前</param>
            <param name="startRow">データ読み込みの開始行。1 行目の場合は 0、2 行目の場合は 1 のように入力します。</param>
            <param name="startColumn">データ読み込みの開始列。A 列の場合は 0、B 列の場合は 1 のように入力します。</param>
            <param name="readAsString">セルを文字列として読み込むかどうかを切り替え</param>
            <returns name="data">Excel ワークシートのデータの行</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Open XML 標準を使用して、Microsoft Excel スプレッドシートにデータを書き込みます。
                データは行ごとに書き込まれ、サブリストは後続の行に書き込まれます。
                行と列はゼロから数えます。たとえば、データ リストの[0,0]の値は
                セル A1 に書き込まれます。NULL 値と空のリストは空のセルとして書き込まれ ます。</summary>
            <param name="filePath">Excel ブックを表すファイル</param>
            <param name="sheetName">データを含むワークシートの名前</param>
            <param name="startRow">データ書き込みの開始行。1 行目の場合は 0、2 行目の場合は 1 のように入力します。</param>
            <param name="startColumn">データ書き込みの開始列。A 列の場合は 0、B 列の場合は 1 のように入力します。</param>
            <param name="data">スプレッドシートに書き込むデータ</param>
            <param name="overWrite">書き込む前にスプレッドシートをクリアするかどうかを切り替え</param>
            <param name="writeAsString">セルの値を文字列として書き込むかどうかを切り替え</param>
            <search>office,excel,spreadsheet</search>
            <returns>スプレッドシートへの書き込みに成功したかどうかを示すブール値。</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>Open XML SDK を使用して Excel ファイルの読み込みと書き込みを処理します。</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Open XML SDK を使用して、Excel スプレッドシートからデータを読み込みます。</summary>
            <param name="filePath">Excel ブック ファイルへのパス</param>
            <param name="sheetName">ブック内の読み込み元シートの名前</param>
            <param name="startRow">読み込みを開始する行(ゼロから数える)</param>
            <param name="startColumn">読み込みを開始する列(ゼロから数える)</param>
            <param name="readAsString">セルの値を文字列として読み込むかどうか</param>
            <returns>スプレッドシートから読み込まれたセルの値</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Open XML SDK を使用して、Excel スプレッドシートにデータを書き込みます。</summary>
            <param name="filePath">Excel ブック ファイルへのパス。存在しない場合は、新しいブックが作成されます。</param>
            <param name="sheetName">ブック内の書き込み先シートの名前</param>
            <param name="data">シートのセルに書き込まれるデータ値</param>
            <param name="startRow">書き込みを開始する行(ゼロから数える)</param>
            <param name="startColumn">書き込みを開始する列(ゼロから数える)</param>
            <param name="overWrite">書き込む前にシートを再作成するかどうか</param>
            <param name="writeAsString">データ値を文字列として書き込むかどうか</param>
            <returns>スプレッドシートへの書き込みに成功したかどうかを示すブール値。</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>ワークシートのデータを指定すると、すべての行で最大の列インデックスを返します。</summary>
            <param name="sheetData">ワークシートのデータ</param>
            <returns>最大の列インデックスが見つかりました</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>列と行のインデックス(たとえば、3 と 7)を指定すると、セル参照(この場合は C7)を返します。</summary>
            <param name="columnIndex">列インデックス(1 から数える)</param>
            <param name="rowIndex">行インデックス(1 から数える)</param>
            <returns>指定した列とインデックスに一致するセル参照</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>セル参照(たとえば、C7)を指定すると、列インデックス(この場合は C = 3)を返します。</summary>
            <param name="cellReference">セル参照(たとえば、C7)</param>
            <returns>列インデックス(1 から数える)は、セルの列を識別する文字のシーケンスに相当します。</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>セルから値を取得します。値を文字列に変換することもできます。</summary>
            <param name="cell">値の取得元のセル</param>
            <param name="sharedStringTable">実際の文字列値を含むスプレッドシートの構造</param>
            <param name="stylesheet">スプレッドシートのスタイル セクション。書式設定の情報が含まれます</param>
            <param name="readAsString">true の場合、実際のセルの値ではなく文字列が返されます</param>
            <returns>セル内の値。文字列に変換される可能性があります</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>指定した名前のワークシートをドキュメントから取得します。</summary>
            <param name="document">ワークシートの取得元のドキュメント</param>
            <param name="sheetName">取得するシートの名前</param>
            <returns>指定した名前のシート。見つからない場合は NULL</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>渡されたデータに関数が含まれているかどうかを確認します。</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>既存のワークブックを開くか、指定したファイル パスに最初から作成します。</summary>
            <param name="filePath">ブックが存在する、または作成されるファイル パス</param>
            <param name="sheetName">新しいブックが作成される場合、シートはこの名前を使用します</param>
            <returns>スプレッドシート ドキュメント</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>スプレッドシートが破損していると Office で識別されないように、スタイルシートに既定のスタイルを追加します。</summary>
            <param name="stylesheet">新しいドキュメントのスタイルシート セクション</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>ドキュメントからワークシートを削除します。</summary>
            <param name="document">ワークシートを削除するドキュメント</param>
            <param name="worksheetPart">削除するワークシート</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>ドキュメントにワークシートを追加します。</summary>
            <param name="document">ワークシートを追加するドキュメント</param>
            <param name="sheetName">追加するワークシートの名前</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>セルの値を設定します。先に文字列に変換することもできます。</summary>
            <param name="value">セルに設定する値</param>
            <param name="cell">値を設定するセル</param>
            <param name="sharedStringTable">実際の文字列値を含むスプレッドシートの構造</param>
            <param name="stylesheet">スプレッドシートのスタイル セクション。書式設定の情報が含まれます</param>
            <param name="writeAsString">true の場合、セルに書き込む前に値が文字列に変換されます</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラス。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>このクラスが使用する、キャッシュされた ResourceManager インスタンスを返します。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>厳密に型指定されたリソース クラスを使用して、すべてのリソース検索で
              現在のスレッドの CurrentUICulture プロパティを変更します。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>「Excel との通信をセットアップする際にエラーが発生しました。開いている Excel インスタンスをすべて終了してから、もう一度実行してください。」に類似するローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>「Excel がインストールされていません。href=ExcelNotInstalled.html」に類似するローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>「1 つまたは複数の入力タイプが一致しません。タイプ {1} の引数を取る {0} のバージョンが見つかりませんでした」に類似するローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>「File.FromPath ノードの代わりに Excel.ReadFromFile ノードを使用してください。」に類似するローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>「ブックが指定したパスに見つかりませんでした。」に類似するローカライズされた文字列を検索します。</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>「指定した名前 '{0}' のワークシートがブック内に見つかりませんでした。」に類似するローカライズされた文字列を検索します。</summary>
        </member>
    </members>
</doc>