<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>Comprueba si el proceso de Excel se está ejecutando.</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>Comprueba si este objeto establece una referencia con Excel.</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>Cierra todos los libros de Excel y proporciona el cuadro de diálogo SaveAs            
            si es necesario. Además recolecta los elementos no utilizados y elimina las referencias a la aplicación Excel</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>Lee el archivo Excel especificado y devuelve un libro.</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>Devuelve una lista de todas las hojas de cálculo presentes en el libro de Excel especificado.</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>Devuelve la hoja de cálculo en el libro especificado por su nombre.</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>Lee y recupera los datos de la hoja de cálculo de Excel especificada.</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>Escribe los datos especificados en el número de fila y columna indicados (base 0) de
            la hoja de cálculo especificada y devuelve la hoja de cálculo.</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Añade al libro especificado una nueva hoja de cálculo de Excel con el nombre indicado.</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>Crea un libro de Excel temporal.</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Guarda el libro de Excel especificado en la ruta de archivos indicada y lo devuelve.</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Leer datos de una hoja de cálculo de Microsoft Excel. Los datos se leen
                por fila y se devuelven en una serie de listas por fila Las filas y columnas se indexan a partir de cero;
                por ejemplo, el valor de la celda A1 aparecerá en la lista de datos como [0,0].
                Este nodo requiere que Microsoft Excel esté instalado.</summary>
            <param name="file">Archivo que representa la hoja de cálculo de Microsoft Excel.</param>
            <param name="sheetName">Nombre de la hoja de cálculo que contiene los datos.</param>
            <param name="readAsStrings">conmutador para considerar o no los archivos de Excel como únicamente cadenas.</param>
            <param name="showExcel">conmutador para alternar entre la visualización y la ocultación de la ventana principal de Excel</param>
            <returns name="data">Filas de datos de la hoja de cálculo de Excel.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Escribe datos en una hoja de cálculo de Microsoft Excel. Los datos se escriben por fila
                con sublistas que se deben escribir en las filas sucesivas. Las filas y columnas se
                indexan a partir de cero; por ejemplo, el valor en la lista de datos en [0,0] se
                escribirá en la celda A1. Los valores nulos y las listas vacías se escriben como 
                celdas vacías de Excel. Este nodo requiere Microsoft Excel para su instalación.</summary>
            <param name="filePath">Ruta de archivo de la hoja de cálculo de Microsoft Excel.</param>
            <param name="sheetName">Nombre de la hoja de cálculo en la que escribir los datos.</param>
            <param name="startRow">Fila inicial para la escritura de datos. 0 equivale a la fila 1, 1 a la fila 2, etc.</param>
            <param name="startCol">Columna inicial para la escritura de datos. 0 equivale a la columna A, 1 a la columna B, etc.</param>
            <param name="data">Datos que se deben escribir en la hoja de cálculo.</param>
            <param name="overWrite"/>
            <returns name="data">Datos escritos en la hoja de cálculo.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>Devuelve datos de la hoja de cálculo especificada (nodo GetDataFromExcelWorksheet)</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>crea una nueva hoja de trabajo a partir del libro y nombre especificados (nodo AddExcelWorksheetToWorkbook)</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>método de ejemplar; escriba datos en una hoja de cálculo existente (nodo WriteDataToExcelWorksheet).</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(nodo GetWorksheetsFromExcelWorkbook)</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>Crea un nuevo libro con la ruta de archivo y el nombre de hoja especificados</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>Método del asistente para leer libros con la visibilidad desactivada.</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(nodo SaveAsExcelWorkbook)</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(nodo ReadExcelFile)</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>método de ejemplar (nodo GetExcelWorksheetByName)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>Métodos para importar o exportar categoría.</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>Escribe una lista de listas en un archivo con el formato de valores 
                separados por comas. La lista exterior representa filas, mientras que la lista interior representa columnas.</summary>
            <param name="filePath">Ruta de escritura</param>
            <param name="data">Lista de listas que escribir en CSV</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>Importa datos de un archivo CSV (valores separados por comas), coloca los elementos en una lista y 
                le aplica transposición si es necesario.</summary>
            <param name="filePath">Archivo CSV que se convertirá en una lista.</param>
            <param name="transpose">Active o desactive esta opción para aplicar la transposición a los datos importados.</param>
            <returns name="list">Lista con los elementos del archivo CSV.</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Leer datos de una hoja de cálculo de Microsoft Excel. Los datos se leen
                por fila y se devuelven en una serie de listas por fila Las filas y columnas se indexan a partir de cero;
                por ejemplo, el valor de la celda A1 aparecerá en la lista de datos como [0,0].
                Este nodo requiere que Microsoft Excel esté instalado.</summary>
            <param name="file">Archivo que representa el libro de Excel.</param>
            <param name="sheetName">Nombre de la hoja de cálculo que contiene los datos.</param>
            <param name="readAsStrings">Active o desactive esta opción para leer las celdas como cadenas.</param>
            <param name="showExcel">Active o desactive esta opción para visualizar la ventana principal de Excel.</param>
            <returns name="data">Filas de datos de la hoja de cálculo de Excel.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Escribe datos en una hoja de cálculo de Microsoft Excel. Los datos se escriben por fila
                con sublistas que se deben escribir en las filas sucesivas. Las filas y columnas se
                indexan a partir de cero; por ejemplo, el valor en la lista de datos en [0,0] se
                escribirá en la celda A1. Los valores nulos y las listas vacías se escriben como 
                celdas vacías de Excel. Este nodo requiere Microsoft Excel para su instalación.</summary>
            <param name="filePath">Ruta de archivo de la hoja de cálculo de Microsoft Excel.</param>
            <param name="sheetName">Nombre de la hoja de cálculo en la que escribir los datos.</param>
            <param name="startRow">Fila inicial para la escritura de datos. 0 equivale a la fila 1, 1 a la fila 2, etc.</param>
            <param name="startColumn">Columna inicial para la escritura de datos. 0 equivale a la columna A, 1 a la columna B, etc.</param>
            <param name="data">Datos que se escribirán en la hoja de cálculo.</param>
            <param name="overWrite">True para sobrescribir el archivo; False para no sobrescribirlo.</param>
            <returns name="data">Datos escritos en la hoja de cálculo.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>Escriba datos en una hoja de cálculo de Microsoft Excel. Los datos se escriben por fila
                con sublistas que se escribirán en las filas sucesivas. Las filas y las columnas se
                indexan a partir de cero; por ejemplo, el valor en la lista de datos en [0,0] se
                escribirá en la celda A1. Los valores nulos y las listas vacías se escriben en Excel como 
                celdas vacías. Este nodo requiere la instalación de Microsoft Excel.</summary>
            <param name="filePath">Archivo que representa el libro de Excel.</param>
            <param name="sheetName">Nombre de la hoja de cálculo que contiene los datos.</param>
            <param name="startRow">Fila inicial para la escritura de datos. Introduzca 0 para la fila 1, 1 para la fila 2, etc.</param>
            <param name="startColumn">Columna inicial para la escritura de datos. 0 equivale a la columna A, 1 a la columna B, etc.</param>
            <param name="data">Datos que se escribirán en la hoja de cálculo.</param>
            <param name="overWrite">Active o desactive esta opción para borrar la hoja de cálculo antes de escribir.</param>
            <param name="writeAsString">Active o desactive esta opción para escribir o no archivos de Excel como cadenas.</param>
            <returns name="data">Filas de datos de la hoja de cálculo de Excel.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Lea datos de una hoja de cálculo de Microsoft Excel mediante la norma Open XML.
            Los datos se leen por fila y se devuelven en una serie de listas por fila.
            Las filas y las columnas tienen un índice cero; por ejemplo, el valor de la celda A1
            aparecerá en la lista de datos en [0,0].</summary>
            <param name="filePath">Archivo que representa el libro de Excel.</param>
            <param name="sheetName">Nombre de la hoja de cálculo que contiene los datos.</param>
            <param name="startRow">Fila inicial para la lectura de datos. 0 equivale a la fila 1, 1 a la fila 2, etc.</param>
            <param name="startColumn">Columna inicial para la lectura de datos. 0 equivale a la columna A, 1 a la columna B, etc.</param>
            <param name="readAsString">Active o desactive esta opción para leer las celdas como cadenas.</param>
            <returns name="data">Filas de datos de la hoja de cálculo de Excel.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Escriba datos en una hoja de cálculo de Microsoft Excel mediante la norma Open XML.
            Los datos se escriben por filas con sublistas que se escriben en filas sucesivas.
            Las filas y las columnas tienen un índice cero; por ejemplo, el valor de la lista de datos en [0,0] se
            se escribirá en la celda A1. Los valores nulos y las listas vacías se escriben como celdas vacías.</summary>
            <param name="filePath">Archivo que representa el libro de Excel.</param>
            <param name="sheetName">Nombre de la hoja de cálculo que contiene los datos.</param>
            <param name="startRow">Fila inicial para la escritura de datos. 0 equivale a la fila 1, 1 a la fila 2, etc.</param>
            <param name="startColumn">Columna inicial para la escritura de datos. 0 equivale a la columna A, 1 a la columna B, etc.</param>
            <param name="data">Datos que se escribirán en la hoja de cálculo.</param>
            <param name="overWrite">Active o desactive esta opción para borrar la hoja de cálculo antes de escribir.</param>
            <param name="writeAsString">Active o desactive esta opción para alternar entre escribir los valores de las celdas como cadenas.</param>
            <search>office,excel,spreadsheet</search>
            <returns>Valor booleano que indica si la escritura en la hoja de cálculo se ha realizado correctamente.</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>Gestiona la lectura y la escritura de archivos Excel mediante el SDK de Open XML.</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Lee datos de una hoja de cálculo de Excel mediante el SDK de Open XML.</summary>
            <param name="filePath">Ruta al archivo de libro de Excel</param>
            <param name="sheetName">Nombre de la hoja que se va a leer desde el libro</param>
            <param name="startRow">Fila desde la que comenzar la lectura (basada en cero)</param>
            <param name="startColumn">Columna desde la que comenzar la lectura (basada en cero)</param>
            <param name="readAsString">Determina si se deben leer los valores de celda como cadenas o no.</param>
            <returns>Valores de celda leídos desde la hoja de cálculo</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Escribe datos en una hoja de cálculo de Excel mediante el SDK de Open XML.</summary>
            <param name="filePath">Ruta al archivo de libro de Excel. Si no existe, se creará un libro nuevo.</param>
            <param name="sheetName">Nombre de la hoja en la que se va a escribir en el libro</param>
            <param name="data">Valores de datos que se escribirán en las celdas de la hoja</param>
            <param name="startRow">Fila desde la que comenzar la escritura (basada en cero)</param>
            <param name="startColumn">Columna desde la que comenzar a escribir (basada en cero)</param>
            <param name="overWrite">Determina si el plano se debe volver a crear antes de escribir.</param>
            <param name="writeAsString">Determina si los valores de datos se deben escribir como cadenas o no.</param>
            <returns>Valor booleano que indica si la escritura en la hoja de cálculo se ha realizado correctamente.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>Si se especifican datos de una hoja de trabajo, devuelve el índice de columna mayor de cualquier fila.</summary>
            <param name="sheetData">Datos de la hoja de trabajo</param>
            <returns>El índice de columna mayor encontrado</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>Si se especifican índices de columna y fila, como 3 y 7, devuelve la referencia de la celda, C7, en este caso.</summary>
            <param name="columnIndex">Índice de columna (basada en 1)</param>
            <param name="rowIndex">Índice de fila (basada en 1)</param>
            <returns>La referencia de celda que coincide con la columna y el índice especificados</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>Si se especifica una referencia de celda, como C7, devuelve el índice de columna, C = 3, en este caso.</summary>
            <param name="cellReference">Una referencia de celda como C7</param>
            <returns>El índice de columna (basada en 1) equivalente a la secuencia de letras que identifica la columna de celdas</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Obtiene el valor de la celda, convirtiéndolo opcionalmente en una cadena.</summary>
            <param name="cell">Celda de la que obtener el valor</param>
            <param name="sharedStringTable">Estructura de la hoja de cálculo que contiene los valores reales de las cadenas</param>
            <param name="stylesheet">Sección de estilo de la hoja de cálculo que contiene información de formato</param>
            <param name="readAsString">Si el valor es True, se devuelve una cadena en lugar del valor de celda real.</param>
            <returns>El valor de la celda convertido posiblemente en una cadena</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Obtiene la hoja de trabajo con el nombre especificado del documento.</summary>
            <param name="document">Documento desde el que se va a obtener la hoja de cálculo</param>
            <param name="sheetName">Nombre de la hoja que se va a obtener</param>
            <returns>La hoja con el nombre especificado o un valor nulo si no se ha encontrado</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>Comprueba si los datos transferidos contienen una función.</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>Abre un libro existente o crea uno desde cero en la ruta de archivo especificada.</summary>
            <param name="filePath">Ruta de archivo en la que se encuentra o se debe crear el libro</param>
            <param name="sheetName">Si se crea un nuevo libro, la hoja utilizará este nombre.</param>
            <returns>Un documento de hoja de cálculo</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>Añade estilos por defecto a la hoja de estilos para que Office no identifique la hoja de cálculo como dañada.</summary>
            <param name="stylesheet">Sección de hoja de estilos de un documento nuevo</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>Elimina una hoja de trabajo del documento.</summary>
            <param name="document">Documento del que se va a eliminar la hoja de trabajo</param>
            <param name="worksheetPart">Hoja de trabajo que se va a eliminar</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Añade una hoja de trabajo al documento.</summary>
            <param name="document">Documento al que se va a añadir la hoja de trabajo</param>
            <param name="sheetName">Nombre de la hoja de trabajo que se va a añadir</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Establece el valor de una celda, convirtiéndola opcionalmente primero en una cadena.</summary>
            <param name="value">Valor que se establecerá en la celda</param>
            <param name="cell">Celda en la que se debe establecer el valor</param>
            <param name="sharedStringTable">Estructura de la hoja de cálculo que contiene los valores reales de las cadenas</param>
            <param name="stylesheet">Sección de estilo de la hoja de cálculo que contiene información de formato</param>
            <param name="writeAsString">Si el valor es True, el valor se convertirá en una cadena antes de escribirlo en la celda.</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>Una clase de recurso con tipado fuerte que permite buscar cadenas localizadas, etc.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>Devuelve el ejemplar de ResourceManager en caché utilizado por esta clase.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>Elimina la propiedad CurrentUICulture del hilo actual para todas
              las búsquedas de recurso que utilizan esta clase de
              recurso con tipado fuerte.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>Busca una cadena localizada similar a Error al configurar la comunicación con Excel. Intente cerrar las instancias abiertas de Excel.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>Busca una cadena localizada similar a Excel no está instalado. href=ExcelNotInstalled.html.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>Busca una cadena localizada similar a Uno o varios de los tipos de entrada no son coincidentes. No se ha podido encontrar una versión de {0} que requiera argumentos de tipo {1}.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>Busca una cadena localizada similar a Utiliza los nodos File.FromPath -&gt; Excel.ReadFromFile en su lugar.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>Busca una cadena localizada similar a No se ha encontrado un libro en la ruta especificada.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>Busca una cadena localizada similar a No se ha encontrado una hoja de trabajo con el nombre especificado '{0}' en el libro.</summary>
        </member>
    </members>
</doc>