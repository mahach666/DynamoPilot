<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>Verifica se il processo di Excel è in esecuzione</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>Verifica se l'oggetto contiene un riferimento ad Excel</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>Chiudere tutte le cartelle di lavoro di Excel e, se necessario, visualizzare la finestra di dialogo Salva con nome. Eseguire inoltre Garbage Collection e rimuovere i riferimenti ad Excel App</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>Legge il file di Excel dato e restituisce una cartella di lavoro</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>Restituisce l'elenco di tutti i fogli di lavoro presenti nella cartella di lavoro di Excel specificata</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>Restituisce il foglio di lavoro nella cartella di lavoro specificata, in base al nome</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>Legge e recupera i dati dal foglio di lavoro di Excel dato</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>Scrive i dati nella cella corrispondente ai numeri di riga e colonna specificati (base 0) del foglio di lavoro e restituisce il foglio di lavoro stesso</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Aggiunge un nuovo foglio di lavoro di Excel con il nome dato alla cartella di lavoro data</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>Crea una nuova cartella di lavoro temporanea di Excel</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Salva la cartella di lavoro di Excel nel percorso specificato e restituisce la cartella</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Legge dati da un foglio di calcolo di Microsoft Excel. I dati vengono letti riga per riga e
                restituiti in una serie di elenchi per riga. Le righe e le colonne sono indicizzate in base zero;
                ad esempio il valore nella cella A1 apparirà nell'elenco di dati come [0,0].
                Questo nodo richiede l'installazione di Microsoft Excel.</summary>
            <param name="file">File che rappresenta il foglio di calcolo di Microsoft Excel.</param>
            <param name="sheetName">Nome del foglio di lavoro contenente i dati.</param>
            <param name="readAsStrings">Alternare per attivare o disattivare la lettura del file di Excel come sole stringhe</param>
            <param name="showExcel">Attivare/Disattivare per mostrare o nascondere la finestra principale di Excel</param>
            <returns name="data">Righe di dati del foglio di lavoro di Microsoft Excel.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Scrive dati in un foglio calcolo di Microsoft Excel. I dati vengono scritti riga per riga; i sottoelenchi vengono scritti in righe successive. Le righe e le colonne sono indicizzate in base zero: ad esempio il valore dell'elenco dati [0,0] verrà scritto nella cella A1. I valori null e gli elenchi vuoti vengono scritti in Excel come celle vuote. Questo nodo richiede l'installazione di Microsoft Excel.</summary>
            <param name="filePath">Percorso del foglio di calcolo di Microsoft Excel.</param>
            <param name="sheetName">Nome del foglio di lavoro nel quale vengono scritti i dati.</param>
            <param name="startRow">Riga iniziale per la scrittura dei dati. Immettere 0 per Riga 1, 1 per Riga 2 e così via.</param>
            <param name="startCol">Colonna iniziale per la scrittura di dati. Immettere 0 per Colonna A, 1 per Colonna B e così via.</param>
            <param name="data">Dati da scrivere nel foglio di calcolo.</param>
            <param name="overWrite"/>
            <returns name="data">Dati scritti nel foglio di calcolo.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>Restituisce i dati dal foglio di lavoro specificato (nodo GetDataFromExcelWorksheet)</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>crea un nuovo foglio di lavoro con il nome dato dalla cartella di lavoro specificata (nodo AddExcelWorksheetToWorkbook)</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>metodo di istanza, scrive dati in un foglio di lavoro esistente (nodo WriteDataToExcelWorksheet)</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(nodo GetWorksheetsFromExcelWorkbook)</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>Crea una nuova cartella di lavoro con il percorso e il nome foglio come input</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>Metodo di supporto per la lettura di cartelle di lavoro con una visibilità disattivata.</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(nodo SaveAsExcelWorkbook)</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(nodo ReadExcelFile)</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>metodo di istanza, (nodo GetExcelWorksheetByName)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>Metodi per la categoria di importazione/esportazione.</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>Scrivere un elenco di elenchi in un file con valori separati da virgola.
                L'elenco esterno rappresenta le righe, gli elenchi interni rappresentano le colonne.</summary>
            <param name="filePath">Percorso per la scrittura</param>
            <param name="data">Elenco di elenchi per la scrittura in formato CSV</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>Importa i dati da un file CSV (valori separati da virgole), inserire gli elementi in un elenco e
                trasporlo, se necessario.</summary>
            <param name="filePath">File CSV da convertire in un elenco</param>
            <param name="transpose">Attivare/Disattivare per sottoporre allo scambio i dati importati</param>
            <returns name="list">Elenco contenente gli elementi nel file CSV</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Legge dati da un foglio di calcolo di Microsoft Excel. I dati vengono letti riga per riga e
                restituiti in una serie di elenchi per riga. Le righe e le colonne sono indicizzate in base zero;
                ad esempio il valore nella cella A1 apparirà nell'elenco di dati come [0,0].
                Questo nodo richiede l'installazione di Microsoft Excel.</summary>
            <param name="file">File che rappresenta la cartella di lavoro di Excel</param>
            <param name="sheetName">Nome del foglio di lavoro contenente i dati</param>
            <param name="readAsStrings">Attivare/Disattivare per alternare la lettura delle celle come stringhe</param>
            <param name="showExcel">Attivare/Disattivare per mostrare o nascondere la finestra principale di Excel</param>
            <returns name="data">Righe di dati del foglio di lavoro di Microsoft Excel</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Scrive dati in un foglio calcolo di Microsoft Excel. I dati vengono scritti riga per riga;
                i sottoelenchi vengono scritti in righe successive. Le righe e le colonne sono
                indicizzate in base zero: ad esempio il valore dell'elenco dati [0,0] verrà scritto
                nella cella A1. I valori null e gli elenchi vuoti vengono scritti in Excel come
                celle vuote. Questo nodo richiede l'installazione di Microsoft Excel.</summary>
            <param name="filePath">Percorso del foglio di calcolo di Microsoft Excel</param>
            <param name="sheetName">Nome del foglio di lavoro nel quale vengono scritti i dati</param>
            <param name="startRow">Riga iniziale per la scrittura dei dati. Immettere 0 per Riga 1, 1 per Riga 2 e così via.</param>
            <param name="startColumn">Colonna iniziale per la scrittura di dati. Immettere 0 per Colonna A, 1 per Colonna B e così via.</param>
            <param name="data">Dati da scrivere nel foglio di calcolo</param>
            <param name="overWrite">True per sovrascrivere il file, false non per sovrascrivere</param>
            <returns name="data">Dati scritti nel foglio di calcolo</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>Scrive dati in un foglio calcolo di Microsoft Excel. I dati vengono scritti riga per riga;
                i sottoelenchi vengono scritti in righe successive. Le righe e le colonne sono
                indicizzate in base zero: ad esempio il valore dell'elenco dati [0,0] verrà
                scritto nella cella A1. I valori null e gli elenchi vuoti vengono scritti in Excel 
                come celle vuote. Questo nodo richiede l'installazione di Microsoft Excel.</summary>
            <param name="filePath">File che rappresenta la cartella di lavoro di Excel.</param>
            <param name="sheetName">Nome del foglio di lavoro contenente i dati.</param>
            <param name="startRow">Riga iniziale per la scrittura dei dati. Immettere 0 per Riga 1, 1 per Riga 2 e così via.</param>
            <param name="startColumn">Colonna iniziale per la scrittura di dati. Immettere 0 per Colonna A, 1 per Colonna B e così via.</param>
            <param name="data">Dati da scrivere nel foglio di calcolo.</param>
            <param name="overWrite">Attivare per cancellare il foglio di calcolo prima di scrivere</param>
            <param name="writeAsString">Alternare per attivare o disattivare la lettura del file di Excel come stringhe</param>
            <returns name="data">Righe di dati del foglio di lavoro di Microsoft Excel.</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Leggere i dati da un foglio di calcolo di Microsoft Excel utilizzando lo standard Open XML.
            I dati vengono letti per riga e restituiti in una serie di elenchi per riga.
            Le righe e le colonne vengono indicizzate in base zero. Ad esempio, il valore della cella A1
            verrà visualizzato nell'elenco di dati in [0,0].</summary>
            <param name="filePath">File che rappresenta la cartella di lavoro di Excel</param>
            <param name="sheetName">Nome del foglio di lavoro contenente i dati</param>
            <param name="startRow">Riga iniziale per la lettura dei dati. Immettere 0 per Riga 1, 1 per Riga 2 e così via.</param>
            <param name="startColumn">Colonna iniziale per la lettura dei dati. Immettere 0 per Colonna A, 1 per Colonna B e così via.</param>
            <param name="readAsString">Attivare/Disattivare per alternare la lettura delle celle come stringhe</param>
            <returns name="data">Righe di dati del foglio di lavoro di Microsoft Excel</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Scrivere dati in un foglio di calcolo di Microsoft Excel utilizzando lo standard Open XML.
            I dati vengono scritti per riga con sottoelenchi da scrivere nelle righe successive.
            Le righe e le colonne vengono indicizzate in base zero. Ad esempio, il valore nell'elenco di dati in [0,0]
            verrà scritto nella cella A1. I valori Null e gli elenchi vuoti vengono scritti come celle vuote.</summary>
            <param name="filePath">File che rappresenta la cartella di lavoro di Excel</param>
            <param name="sheetName">Nome del foglio di lavoro contenente i dati</param>
            <param name="startRow">Riga iniziale per la scrittura dei dati. Immettere 0 per Riga 1, 1 per Riga 2 e così via.</param>
            <param name="startColumn">Colonna iniziale per la scrittura di dati. Immettere 0 per Colonna A, 1 per Colonna B e così via.</param>
            <param name="data">Dati da scrivere nel foglio di calcolo</param>
            <param name="overWrite">Attivare per cancellare il foglio di calcolo prima di scrivere</param>
            <param name="writeAsString">Attivare/Disattivare per alternare la scrittura dei valori delle celle come stringhe</param>
            <search>office,excel,spreadsheet</search>
            <returns>Valore booleano che indica se la scrittura sul foglio di calcolo è stata eseguita correttamente.</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>Gestisce la lettura e la scrittura di file Excel utilizzando Open XML SDK.</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Legge i dati da un foglio di calcolo di Excel mediante Open XML SDK.</summary>
            <param name="filePath">Percorso del file della cartella di lavoro di Excel</param>
            <param name="sheetName">Nome del foglio da leggere dall'interno della cartella di lavoro</param>
            <param name="startRow">Riga da cui iniziare la lettura (in base zero)</param>
            <param name="startColumn">Colonna da cui iniziare la lettura (in base zero)</param>
            <param name="readAsString">Indica se leggere o meno i valori delle celle come stringhe</param>
            <returns>Valori di cella letti dal foglio di calcolo</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Scrive i dati in un foglio di calcolo di Excel utilizzando Open XML SDK.</summary>
            <param name="filePath">Percorso del file della cartella di lavoro di Excel. Se non esiste, verrà creata una nuova cartella di lavoro.</param>
            <param name="sheetName">Nome del foglio da scrivere all'interno della cartella di lavoro</param>
            <param name="data">Valori di dati da scrivere nelle celle del foglio</param>
            <param name="startRow">Riga da cui iniziare la scrittura (in base zero)</param>
            <param name="startColumn">Colonna da cui iniziare la scrittura (in base zero)</param>
            <param name="overWrite">Indica se il foglio deve essere ricreato prima della scrittura</param>
            <param name="writeAsString">Indica se i valori dei dati devono essere scritti come stringhe o meno</param>
            <returns>Valore booleano che indica se la scrittura sul foglio di calcolo è stata eseguita correttamente.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>Dati i dati di un foglio di lavoro, restituisce l'indice di colonna più grande per eventuali righe.</summary>
            <param name="sheetData">Dati del foglio di lavoro</param>
            <returns>L'indice di colonna più grande trovato</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>Dati gli indici di riga e colonna, come 3 e 7, restituisce il riferimento di cella, C7 in questo caso.</summary>
            <param name="columnIndex">Indice di colonna (in base 1)</param>
            <param name="rowIndex">Indice di riga (in base 1)</param>
            <returns>Il riferimento di cella corrispondente alla colonna e all'indice specificati</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>Dato un riferimento di cella, ad esempio C7, restituisce l'indice di colonna, C = 3 in questo caso.</summary>
            <param name="cellReference">Un riferimento di cella, ad esempio C7</param>
            <returns>L'indice di colonna (in base 1) equivalente alla sequenza di lettere che identifica la colonna della cella</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Ottiene il valore dalla cella, convertendola in una stringa, se lo si desidera.</summary>
            <param name="cell">Cella da cui ottenere il valore</param>
            <param name="sharedStringTable">Struttura del foglio di calcolo contenente i valori di stringa effettivi</param>
            <param name="stylesheet">Sezione dello stile del foglio di calcolo contenente informazioni sulla formattazione</param>
            <param name="readAsString">Se è True, verrà restituita una stringa anziché il valore effettivo della cella</param>
            <returns>Il valore interno alla cella, probabilmente convertito in una stringa</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Ottiene il foglio di lavoro con il nome specificato dal documento.</summary>
            <param name="document">Documento da cui ottenere il foglio di lavoro</param>
            <param name="sheetName">Nome del foglio da ottenere</param>
            <returns>Il foglio con il nome specificato o null se non è stato trovato</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>Verifica se i dati passati contengono una funzione.</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>Apre una cartella di lavoro esistente o ne crea una nuova nel percorso di file specificato.</summary>
            <param name="filePath">Percorso del file in cui si trova o si desidera creare la cartella di lavoro</param>
            <param name="sheetName">Nel caso in cui venga creata una nuova cartella di lavoro, il foglio utilizzerà questo nome</param>
            <returns>Un documento di tipo foglio di calcolo</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>Aggiunge stili di default al foglio di stile in modo che Office non identifichi il foglio di calcolo come danneggiato.</summary>
            <param name="stylesheet">Sezione del foglio di stile di un nuovo documento</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>Rimuove un foglio di lavoro dal documento.</summary>
            <param name="document">Documento da cui rimuovere il foglio di lavoro</param>
            <param name="worksheetPart">Foglio di lavoro da rimuovere</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Aggiunge un foglio di lavoro al documento.</summary>
            <param name="document">Documento a cui aggiungere il foglio di lavoro</param>
            <param name="sheetName">Nome del foglio di lavoro da aggiungere</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Imposta il valore di una cella, convertendola prima in una stringa, se lo si desidera.</summary>
            <param name="value">Valore da impostare nella cella</param>
            <param name="cell">Cella in cui impostare il valore</param>
            <param name="sharedStringTable">Struttura del foglio di calcolo contenente i valori di stringa effettivi</param>
            <param name="stylesheet">Sezione dello stile del foglio di calcolo contenente informazioni sulla formattazione</param>
            <param name="writeAsString">Se è True, il valore verrà convertito in una stringa prima della scrittura nella cella</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>Restituisce l'istanza di ResourceManager memorizzata nella cache utilizzata da questa classe.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>Sostituisce la proprietà CurrentUICulture del thread corrente per tutte le ricerche di risorse che utilizzano questa classe di risorse fortemente tipizzata.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>Cerca una stringa localizzata simile a Errore durante la comunicazione con Excel. Chiudere le istanze di Excel aperte.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>Cerca una stringa localizzata simile a Excel non è installato. href=ExcelNotInstalled.html.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>Cerca una stringa localizzata simile a Uno o più tipi di input non corrispondono. Impossibile trovare una versione di {0} in grado di accettare argomenti di tipo {1}.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>Cerca una stringa localizzata simile a In sostituzione, utilizzare il nodo File.FromPath -&gt; Excel.ReadFromFile.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>Cerca una stringa localizzata simile a Nel percorso specificato non è stata trovata una cartella di lavoro.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>Cerca una stringa localizzata simile a Nella cartella di lavoro non è stato trovato un foglio di lavoro con il nome specificato '{0}'.</summary>
        </member>
    </members>
</doc>