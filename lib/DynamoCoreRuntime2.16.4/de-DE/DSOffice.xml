<?xml version="1.0"?><doc>
    <assembly>
        <name>DSOffice</name>
    </assembly>
    <members>
        <member name="P:DSOffice.ExcelInterop.ExcelProcessRunning">
            <summary>Überprüft, ob der Excel-Prozess ausgeführt wird</summary>
        </member>
        <member name="P:DSOffice.ExcelInterop.HasValidExcelReference">
            <summary>Überprüft, ob dieses Objekt eine Referenz auf Excel enthält</summary>
        </member>
        <member name="M:DSOffice.ExcelInterop.TryQuitAndCleanup(System.Boolean)">
            <summary>Schließt alle Excel-Arbeitsmappen und zeigt ggf. Dialogfeld Speichern unter an. Führt außerdem
            Bereinigung durch und entfernt Referenzen zur Excel-App</summary>
        </member>
        <member name="M:DSOffice.Excel.ReadExcelFile(System.IO.FileInfo)">
            <summary>Liest die angegebene Excel-Datei und gibt eine Arbeitsmappe zurück</summary>
            <param name="file"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetWorksheetsFromExcelWorkbook(DSOffice.WorkBook)">
            <summary>Gibt eine Liste aller Arbeitsblätter in der angegebenen Excel-Arbeitsmappe zurück</summary>
            <param name="workbook"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetExcelWorksheetByName(DSOffice.WorkBook,System.String)">
            <summary>Gibt das Arbeitsblatt in der angegebenen Arbeitsmappe nach dem zugehörigen Namen zurück</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.GetDataFromExcelWorksheet(DSOffice.WorkSheet)">
            <summary>Daten aus dem angegebenen Excel-Arbeitsblatt werden gelesen und abgerufen</summary>
            <param name="worksheet"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.WriteDataToExcelWorksheet(DSOffice.WorkSheet,System.Int32,System.Int32,System.Object[][])">
            <summary>Schreibt die angegebenen Daten an der jeweiligen Zeilen- und Spaltennummer (Basis 0) in das
            angegebene Arbeitsblatt und gibt das Arbeitsblatt zurück</summary>
            <param name="worksheet"/>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.AddExcelWorksheetToWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Fügt ein neues Excel-Arbeitsblatt mit dem angegebenen Namen der jeweiligen Arbeitsmappe hinzu</summary>
            <param name="workbook"/>
            <param name="name"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.NewExcelWorkbook">
            <summary>Erstellt eine neue temporäre Excel-Arbeitsmappe</summary>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.SaveAsExcelWorkbook(DSOffice.WorkBook,System.String)">
            <summary>Speichert die angegebene Excel-Arbeitsmappe im angegebenen Dateipfad und gibt sie zurück</summary>
            <param name="workbook"/>
            <param name="filename"/>
            <returns/>
        </member>
        <member name="M:DSOffice.Excel.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Liest Daten aus einer Microsoft Excel-Tabelle. Daten werden nach Zeilen gelesen und
                in einer Reihe von Listen nach Zeilen ausgegeben. Zeilen und Spalten sind nullbasiert indiziert;
                Beispiel: Der Wert aus Zelle A1 erscheint in der Liste an Position [0,0].
                Für diesen Knoten muss Microsoft Excel installiert sein.</summary>
            <param name="file">Datei mit der Microsoft Excel-Tabelle.</param>
            <param name="sheetName">Name des Arbeitsblatts, das die Daten enthält.</param>
            <param name="readAsStrings">Excel-Dateien ausschließlich als Zeichenfolgen lesen ein/aus</param>
            <param name="showExcel">Haupt-Excel-Fenster ein- und ausblenden ein/aus</param>
            <returns name="data">Zeilen mit Daten aus dem Excel-Arbeitsblatt.</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Excel.WriteToFile(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Schreibt Daten in eine Microsoft Excel-Tabelle. Die Daten werden nach Zeilen geschrieben, wobei
                Unterlisten in aufeinander folgende Zeilen geschrieben werden. Zeilen und Spalten sind nullindiziert.
                Beispiel: Der Wert an Position [0,0] in der Datenliste wird in Zelle A1 geschrieben. Nullwerte und 
                leere Listen werden als leere Zellen in Excel geschrieben.
                Für diesen Block muss Microsoft Excel installiert sein.</summary>
            <param name="filePath">Dateipfad der Microsoft Excel-Tabelle</param>
            <param name="sheetName">Name des Arbeitsblatts, in das Daten geschrieben werden sollen</param>
            <param name="startRow">Startzeile zum Schreiben von Daten. Geben Sie 0 für Zeile 1, 1 für Zeile 2 usw. ein.</param>
            <param name="startCol">Startspalte zum Schreiben von Daten. Geben Sie 0 für Spalte A, 1 für Spalte B usw. ein.</param>
            <param name="data">Die in die Tabelle zu schreibenden Daten</param>
            <param name="overWrite"/>
            <returns name="data">Die in die Tabelle geschriebenen Daten</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="P:DSOffice.WorkSheet.Data">
            <summary>Gibt Daten aus angegebenem Arbeitsblatt zurück (Block GetDataFromExcelWorksheet)</summary>
        </member>
        <member name="M:DSOffice.WorkSheet.#ctor(DSOffice.WorkBook,System.String,System.Boolean)">
            <summary>erstellt neues Arbeitsblatt aus angegebener Arbeitsmappe und Name (Block AddExcelWorksheetToWorkbook)</summary>
            <param name="wbook"/>
            <param name="sheetName"/>
            <param name="overWrite"/>
        </member>
        <member name="M:DSOffice.WorkSheet.WriteData(System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Instanzenmethode, schreibt Daten in vorhandenes Arbeitsblatt, (Block WriteDataToExcelWorksheet)</summary>
            <param name="startRow"/>
            <param name="startColumn"/>
            <param name="data"/>
            <param name="writeAsString"/>
            <returns/>
        </member>
        <member name="P:DSOffice.WorkBook.Name">
            <summary/>
        </member>
        <member name="P:DSOffice.WorkBook.WorkSheets">
            <summary>(Block GetWorksheetsFromExcelWorkbook)</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(System.String)">
            <summary>Erstellt neue Arbeitsmappe mit Dateipfad und Blattname als Eingabe</summary>
        </member>
        <member name="M:DSOffice.WorkBook.CloseHidden">
            <summary>Hilfsmethode zum Lesen von Arbeitsmappen mit deaktivierter Sichtbarkeit.</summary>
        </member>
        <member name="M:DSOffice.WorkBook.#ctor(DSOffice.WorkBook,System.String)">
            <summary>(Block SaveAsExcelWorkbook)</summary>
            <param name="wbook"/>
            <param name="filename"/>
        </member>
        <member name="M:DSOffice.WorkBook.ReadExcelFile(System.String)">
            <summary>(Block ReadExcelFile)</summary>
            <param name="path"/>
            <returns/>
        </member>
        <member name="M:DSOffice.WorkBook.GetWorksheetByName(System.String)">
            <summary>Instanzenmethode, (Block GetExcelWorksheetByName)</summary>
            <param name="sheetName"/>
            <returns/>
        </member>
        <member name="T:DSOffice.Data">
            <summary>Methoden für Import-/Exportkategorie</summary>
        </member>
        <member name="M:DSOffice.Data.ExportCSV(System.String,System.Object[][])">
            <summary>Schreibt eine Liste von Listen in Form kommagetrennter Werte in eine Datei. Die äußere Liste steht für Zeilen, die innere für Spalten.</summary>
            <param name="filePath">Pfad, unter dem geschrieben werden soll</param>
            <param name="data">In CSV zu schreibende Liste von Listen</param>
            <search>write,text,file</search>
        </member>
        <member name="M:DSOffice.Data.ImportCSV(System.String,System.Boolean)">
            <summary>Importiert Daten aus einer CSV-Datei (kommagetrennte Werte), platziert die Elemente in einer Liste und stellt diese nötigenfalls um.</summary>
            <param name="filePath">CSV-Datei, die in eine Liste konvertiert werden soll</param>
            <param name="transpose">Umstellen der importierten Daten ein/aus</param>
            <returns name="list">Liste mit den Elementen aus der CSV-Datei</returns>
            <search>import,csv,comma,file,list,separate,transpose</search>
        </member>
        <member name="M:DSOffice.Data.ImportExcel(System.IO.FileInfo,System.String,System.Boolean,System.Boolean)">
            <summary>Liest Daten aus einer Microsoft Excel-Tabelle. Daten werden nach Zeilen gelesen und
                in einer Reihe von Listen nach Zeilen ausgegeben. Zeilen und Spalten sind nullbasiert indiziert;
                Beispiel: Der Wert aus Zelle A1 erscheint in der Liste an Position [0,0].
                Für diesen Knoten muss Microsoft Excel installiert sein.</summary>
            <param name="file">Datei mit der Excel-Arbeitsmappe</param>
            <param name="sheetName">Name des Arbeitsblatts, das Daten enthält</param>
            <param name="readAsStrings">Lesen von Zellen als Zeichenfolgen ein/aus</param>
            <param name="showExcel">Anzeigen des Excel-Hauptfensters ein/aus</param>
            <returns name="data">Zeilen mit Daten aus dem Excel-Arbeitsblatt</returns>
            <search>office,excel,spreadsheet,ifequalreturnindex</search>
        </member>
        <member name="M:DSOffice.Data.ExportExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean)">
            <summary>Schreibt Daten in eine Microsoft Excel-Tabelle. Die Daten werden nach Zeilen geschrieben, wobei
                Unterlisten in aufeinander folgende Zeilen geschrieben werden. Zeilen und Spalten sind nullindiziert.
                Beispiel: Der Wert an Position [0,0] in der Datenliste wird in Zelle A1 geschrieben. Nullwerte und 
                leere Listen werden als leere Zellen in Excel geschrieben.
                Für diesen Block muss Microsoft Excel installiert sein.</summary>
            <param name="filePath">Dateipfad der Microsoft Excel-Tabelle</param>
            <param name="sheetName">Name des Arbeitsblatts, in das Daten geschrieben werden sollen</param>
            <param name="startRow">Startzeile zum Schreiben von Daten. Geben Sie 0 für Zeile 1, 1 für Zeile 2 usw. ein.</param>
            <param name="startColumn">Startspalte zum Schreiben von Daten. Geben Sie 0 für Spalte A, 1 für Spalte B usw. ein.</param>
            <param name="data">Die in die Tabelle zu schreibenden Daten</param>
            <param name="overWrite">True zum Überschreiben der Datei, sonst False</param>
            <returns name="data">Die in die Tabelle geschriebenen Daten</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.ExportToExcel(System.String,System.String,System.Int32,System.Int32,System.Object[][],System.Boolean,System.Boolean)">
            <summary>Schreibt Daten in eine Microsoft Excel-Tabelle. Die Daten werden nach Zeilen geschrieben, wobei
                Unterlisten in aufeinander folgende Zeilen geschrieben werden. Zeilen und Spalten sind nullindiziert.
                Beispiel: Der Wert an Position [0,0] in der Datenliste wird in Zelle A1 geschrieben. Nullwerte und 
                leere Listen werden als leere Zellen in Excel geschrieben.
                Für diesen Block muss Microsoft Excel installiert sein.</summary>
            <param name="filePath">Datei mit der Excel-Arbeitsmappe</param>
            <param name="sheetName">Name des Arbeitsblatts, das Daten enthält</param>
            <param name="startRow">Startzeile zum Schreiben von Daten. Geben Sie 0 für Zeile 1, 1 für Zeile 2 usw. ein.</param>
            <param name="startColumn">Startspalte zum Schreiben von Daten. Geben Sie 0 für Spalte A, 1 für Spalte B usw. ein.</param>
            <param name="data">Die in die Tabelle zu schreibenden Daten</param>
            <param name="overWrite">Löschen der Tabelle vor dem Schreiben ein/aus</param>
            <param name="writeAsString">Excel-Datei als Zeichenfolgen schreiben ein/aus</param>
            <returns name="data">Zeilen mit Daten aus dem Excel-Arbeitsblatt</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLImportExcel(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Liest Daten aus einer Microsoft Excel-Tabelle mithilfe der Open XML-Norm.
            Daten werden zeilenweise gelesen und in einer Reihe von Listen nach Zeilen zurückgegeben.
            Zeilen und Spalten sind nullindiziert. Beispiel: Der Wert in Zelle A1 wird
            in der Datenliste bei [0,0] angezeigt.</summary>
            <param name="filePath">Datei mit der Excel-Arbeitsmappe</param>
            <param name="sheetName">Name des Arbeitsblatts, das Daten enthält</param>
            <param name="startRow">Startzeile zum Lesen von Daten. Geben Sie 0 für Zeile 1, 1 für Zeile 2 usw. ein.</param>
            <param name="startColumn">Startspalte zum Lesen von Daten. Geben Sie 0 für Spalte A, 1 für Spalte B usw. ein.</param>
            <param name="readAsString">Lesen von Zellen als Zeichenfolgen ein/aus</param>
            <returns name="data">Zeilen mit Daten aus dem Excel-Arbeitsblatt</returns>
            <search>office,excel,spreadsheet</search>
        </member>
        <member name="M:DSOffice.Data.OpenXMLExportExcel(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Schreibt Daten in eine Microsoft Excel-Tabelle mithilfe der Open XML-Norm.
            Daten werden zeilenweise geschrieben, und Unterlisten werden in aufeinander folgenden Zeilen geschrieben.
            Zeilen und Spalten sind nullindiziert. Beispiel: Der Wert in der Datenliste bei [0,0] wird
            in die Zelle A1 geschrieben. Nullwerte und leere Listen werden als leere Zellen geschrieben.</summary>
            <param name="filePath">Datei mit der Excel-Arbeitsmappe</param>
            <param name="sheetName">Name des Arbeitsblatts, das Daten enthält</param>
            <param name="startRow">Startzeile zum Schreiben von Daten. Geben Sie 0 für Zeile 1, 1 für Zeile 2 usw. ein.</param>
            <param name="startColumn">Startspalte zum Schreiben von Daten. Geben Sie 0 für Spalte A, 1 für Spalte B usw. ein.</param>
            <param name="data">Die in die Tabelle zu schreibenden Daten</param>
            <param name="overWrite">Löschen der Tabelle vor dem Schreiben ein/aus</param>
            <param name="writeAsString">Umschalten, um zwischen dem Schreiben von Zellenwerten als Zeichenfolgen zu wechseln</param>
            <search>office,excel,spreadsheet</search>
            <returns>Boolescher Wert, der angibt, ob das Schreiben in eine Tabelle erfolgreich ist.</returns>
        </member>
        <member name="T:DSOffice.OpenXmlHelper">
            <summary>Verarbeitet das Lesen und Schreiben von Excel-Dateien mithilfe des Open XML SDK.</summary>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Read(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>Liest Daten aus einer Excel-Tabelle mithilfe des Open XML SDK.</summary>
            <param name="filePath">Pfad zur Excel-Arbeitsmappe</param>
            <param name="sheetName">Name des Arbeitsblatts, das aus der Arbeitsmappe gelesen werden soll</param>
            <param name="startRow">Zeile, ab der mit dem Lesen begonnen werden soll (nullbasiert)</param>
            <param name="startColumn">Spalte, von der aus mit dem Lesen begonnen werden soll (nullbasiert)</param>
            <param name="readAsString">Gibt an, ob Zellenwerte als Zeichenfolgen gelesen werden sollen oder nicht</param>
            <returns>Aus der Tabelle gelesene Zellenwerte</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.Write(System.String,System.String,System.Object[][],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Schreibt Daten mithilfe des Open XML SDK in eine Excel-Tabelle.</summary>
            <param name="filePath">Pfad zur Excel-Arbeitsmappe. Wenn diese Datei nicht vorhanden ist, wird eine neue Arbeitsmappe erstellt.</param>
            <param name="sheetName">Name des Arbeitsblatts, in das in der Arbeitsmappe geschrieben werden soll</param>
            <param name="data">In die Zellen der Tabelle zu schreibende Datenwerte</param>
            <param name="startRow">Zeile, ab der mit dem Schreiben begonnen werden soll (nullbasiert)</param>
            <param name="startColumn">Spalte, ab der mit dem Schreiben begonnen werden soll (nullbasiert)</param>
            <param name="overWrite">Gibt an, ob die Tabelle vor dem Schreiben neu erstellt werden soll</param>
            <param name="writeAsString">Gibt an, ob Datenwerte als Zeichenfolgen geschrieben werden sollen oder nicht</param>
            <returns>Boolescher Wert, der angibt, ob das Schreiben in eine Tabelle erfolgreich ist.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetLargestColumnIndex(DocumentFormat.OpenXml.Spreadsheet.SheetData)">
            <summary>Gibt anhand der Arbeitsblattdaten den größten Spaltenindex für alle Reihen zurück.</summary>
            <param name="sheetData">Arbeitsblattdaten</param>
            <returns>Der größte gefundene Spaltenindex</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellReference(System.Int32,System.UInt32)">
            <summary>Gibt anhand der Spalten- und Zeilenindizes, wie 3 und 7, den Zellbezug zurück, in diesem Fall C7.</summary>
            <param name="columnIndex">Spaltenindex (auf 1 basierend)</param>
            <param name="rowIndex">Zeilenindex (auf 1 basierend)</param>
            <returns>Der Zellbezug, der mit der angegebenen Spalte und dem angegebenen Index übereinstimmt.</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetColumnIndex(System.String)">
            <summary>Gibt anhand eines Zellbezugs, wie C7, den Spaltenindex zurück, in diesem Fall C = 3.</summary>
            <param name="cellReference">Ein Zellbezug, wie C7</param>
            <returns>Der Spaltenindex (auf 1 basierend), der der Buchstabenfolge zur Kennzeichnung der Zellspalte entspricht</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetCellValue(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Ruft den Wert aus der Zelle ab und konvertiert ihn optional in eine Zeichenfolge.</summary>
            <param name="cell">Zelle, aus der der Wert abgerufen werden soll</param>
            <param name="sharedStringTable">Struktur der Tabelle, die die tatsächlichen Zeichenfolgenwerte enthält</param>
            <param name="stylesheet">Stilabschnitt der Tabelle, der die Formatinformationen enthält</param>
            <param name="readAsString">Wenn true, wird eine Zeichenfolge zurückgegeben, nicht der tatsächliche Zellenwert</param>
            <returns>Der Wert innerhalb der Zelle, möglicherweise in eine Zeichenfolge konvertiert</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Ruft das Arbeitsblatt mit dem angegebenen Namen aus dem Dokument ab.</summary>
            <param name="document">Dokument, aus dem das Arbeitsblatt abgerufen werden soll</param>
            <param name="sheetName">Name des Arbeitsblatts, das abgerufen werden soll</param>
            <returns>Die Tabelle mit dem angegebenen Namen oder Null, wenn diese nicht gefunden wurde</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.ContainsFunction(System.Object[][])">
            <summary>Prüft, ob die übergebenen Daten eine Funktion enthalten.</summary>
            <param name="data"/>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.OpenOrCreate(System.String,System.String)">
            <summary>Öffnet eine vorhandene Arbeitsmappe oder erstellt eine neue Arbeitsmappe im angegebenen Dateipfad.</summary>
            <param name="filePath">Dateipfad, unter dem die Arbeitsmappe gespeichert ist oder erstellt werden soll</param>
            <param name="sheetName">Wenn eine neue Arbeitsmappe erstellt wird, verwendet die Tabelle diesen Namen</param>
            <returns>Ein Tabellenkalkulationsdokument</returns>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddDefaultStyles(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>Fügt Stile zur Formatvorlage hinzu, sodass Office die Tabelle nicht als beschädigt identifiziert.</summary>
            <param name="stylesheet">Formatvorlagenabschnitt eines neuen Dokuments</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.RemoveWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>Entfernt ein Arbeitsblatt aus dem Dokument.</summary>
            <param name="document">Dokument, aus dem das Arbeitsblatt entfernt werden soll</param>
            <param name="worksheetPart">Zu entfernendes Arbeitsblatt</param>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>Fügt ein Arbeitsblatt zum Dokument hinzu.</summary>
            <param name="document">Dokument, zu dem das Arbeitsblatt hinzugefügt werden soll</param>
            <param name="sheetName">Name des hinzuzufügenden Arbeitsblatts</param>
            <returns/>
        </member>
        <member name="M:DSOffice.OpenXmlHelper.SetCellValue(System.Object,DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.Boolean)">
            <summary>Legt den Wert einer Zelle fest, optional erfolgt zunächst die Konvertierung in eine Zeichenfolge.</summary>
            <param name="value">In der Zelle festzulegender Wert</param>
            <param name="cell">Zelle, in der der Wert festgelegt werden soll</param>
            <param name="sharedStringTable">Struktur der Tabelle, die die tatsächlichen Zeichenfolgenwerte enthält</param>
            <param name="stylesheet">Stilabschnitt der Tabelle, der die Formatinformationen enthält</param>
            <param name="writeAsString">Wenn true, wird der Wert vor dem Schreiben in die Zelle in eine Zeichenfolge konvertiert</param>
        </member>
        <member name="T:DSOffice.Properties.Resources">
            <summary>Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ResourceManager">
            <summary>Gibt die im Cache gespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.Culture">
            <summary>Überschreibt die Eigenschaft CurrentUICulture des aktuellen Threads für alle
              Ressourcenabrufe, die diese stark typisierte Ressourcenklasse verwenden.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelCommunicationError">
            <summary>Sucht eine lokalisierte Zeichenfolge ähnlich wie 'Fehler beim Einrichten der Kommunikation mit Excel. Schließen Sie alle geöffneten Instanzen von Excel.'.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ExcelNotInstalled">
            <summary>Sucht eine lokalisierte Zeichenfolge ähnlich wie Excel ist nicht installiert. href=ExcelNotInstalled.html.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.kMethodResolutionFailureWithTypes">
            <summary>Sucht eine lokalisierte Zeichenfolge ähnlich wie 'Ein oder mehrere Eingabetypen stimmen nicht überein. Es wurde keine Version von {0} gefunden, für die Argumente des Typs {1} verwendet werden können.'.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.ReadObsolete">
            <summary>Sucht eine lokalisierte Zeichenfolge ähnlich wie 'Verwenden Sie stattdessen den Block File.FromPath -&gt; Excel.ReadFromFile.'.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorkbookNotFound">
            <summary>Sucht eine lokalisierte Zeichenfolge ähnlich wie 'Im angegebenen Pfad wurde keine Arbeitsmappe gefunden.'.</summary>
        </member>
        <member name="P:DSOffice.Properties.Resources.WorksheetNotFound">
            <summary>Sucht eine lokalisierte Zeichenfolge ähnlich wie 'Ein Arbeitsblatt mit dem angegebenen Namen '{0}' wurde in der Arbeitsmappe nicht gefunden.'.</summary>
        </member>
    </members>
</doc>